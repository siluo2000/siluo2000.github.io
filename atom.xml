<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>图难于其易</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhanyunmian.coding.me/"/>
  <updated>2019-10-21T04:42:21.128Z</updated>
  <id>http://zhanyunmian.coding.me/</id>
  
  <author>
    <name>Yunmian Zhan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写个博客</title>
    <link href="http://zhanyunmian.coding.me/2019/10/19/%E5%86%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://zhanyunmian.coding.me/2019/10/19/写个博客/</id>
    <published>2019-10-19T14:04:51.000Z</published>
    <updated>2019-10-21T04:42:21.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="博客框架hexo"><a href="#博客框架hexo" class="headerlink" title="博客框架hexo"></a>博客框架hexo</h3><p><a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">hexo官网</a><br>需要安装:</p><ul><li>Node</li><li>Git</li></ul><a id="more"></a><p>需要了解：</p><ul><li>markdown<ul><li><a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">Markdown基本语法</a></li></ul></li></ul><h3 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a>编辑工具</h3><p>支持.md文件的都可以，有高亮提示更好。<br>常用：</p><ul><li>sublime text</li><li>vs code</li></ul><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo theme</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next</a><br><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a></p><h3 id="部署平台"><a href="#部署平台" class="headerlink" title="部署平台"></a>部署平台</h3><p>国外：<a href="http://github.com" target="_blank" rel="noopener">github</a><br>国内：<a href="https://dev.tencent.com/" target="_blank" rel="noopener">腾讯云开发者平台</a></p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p><a href="https://blog.csdn.net/sunshine940326/article/details/70936988" target="_blank" rel="noopener">hexo高阶教程：想让你的博客被更多的人在搜索引擎中搜到吗？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;博客框架hexo&quot;&gt;&lt;a href=&quot;#博客框架hexo&quot; class=&quot;headerlink&quot; title=&quot;博客框架hexo&quot;&gt;&lt;/a&gt;博客框架hexo&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo官网&lt;/a&gt;&lt;br&gt;需要安装:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="blog" scheme="http://zhanyunmian.coding.me/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>vue.config.js 配置</title>
    <link href="http://zhanyunmian.coding.me/2019/10/19/vue-config-js-%E9%85%8D%E7%BD%AE/"/>
    <id>http://zhanyunmian.coding.me/2019/10/19/vue-config-js-配置/</id>
    <published>2019-10-19T08:37:33.000Z</published>
    <updated>2019-10-19T13:13:02.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="publicPath"><a href="#publicPath" class="headerlink" title="publicPath"></a>publicPath</h2><p>如果需要build之后输出<code>./</code>路径的话，需要设置publicPath为<code>././</code>：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  publicPath<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span>  <span class="token operator">?</span> <span class="token string">'././'</span>  <span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;publicPath&quot;&gt;&lt;a href=&quot;#publicPath&quot; class=&quot;headerlink&quot; title=&quot;publicPath&quot;&gt;&lt;/a&gt;publicPath&lt;/h2&gt;&lt;p&gt;如果需要build之后输出&lt;code&gt;./&lt;/code&gt;路径的话，需要设置p
      
    
    </summary>
    
    
    
      <category term="vue.config.js" scheme="http://zhanyunmian.coding.me/tags/vue-config-js/"/>
    
      <category term="vue" scheme="http://zhanyunmian.coding.me/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Web性能实践日志笔记</title>
    <link href="http://zhanyunmian.coding.me/2019/08/13/Web%E6%80%A7%E8%83%BD%E5%AE%9E%E8%B7%B5%E6%97%A5%E5%BF%97/"/>
    <id>http://zhanyunmian.coding.me/2019/08/13/Web性能实践日志/</id>
    <published>2019-08-13T13:05:24.000Z</published>
    <updated>2019-10-19T13:16:06.634Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《Web性能实践日志》</p></blockquote><h3 id="localStorage-读取性能"><a href="#localStorage-读取性能" class="headerlink" title="localStorage 读取性能"></a>localStorage 读取性能</h3><p>localStorage技术应用：</p><ul><li>使用localStorage来实时保存您正在输入的评论</li><li>谷歌和Bing用localStorage存储JavaScript和CSS，来改善他们的移动网站的性能</li></ul><p>为了保持跨浏览器会话，localStorage的数据被写入磁盘中。这意味着当你从localStorage中读取数据时，你实际上是从硬盘驱动器上读取这些字节。<br>读写硬盘的开销高昂，特别是相对于读写内存来说。</p><a id="more"></a><p>更有趣的是，localStorage按源存储数据，这意味着，在同一时间内，浏览器中的多个标签页可以访问相同的localStorage数据。</p><p>当需要从localStorage中读取数据时，浏览器首先需要停下来看看是否有其他标签页正在访问同一数据区域。如果是的话，浏览器必须等到之前的访问操作完成，才可以读取该值。</p><p>因此，与从localStorage读取数据相关的延迟是不定的，它在很大程度上取决于在那个时间点上浏览器还在进行的其他操作。</p><h4 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h4><p><a href="https://jsperf.com/localstorage-string-size" target="_blank" rel="noopener">基准测试</a>从单一localStorage键值中读取的数据量对速度没有影响。<br><a href="https://jsperf.com/localstorage-string-size-retrieval" target="_blank" rel="noopener">基准测试</a>在大多数浏览器中，读取100个字符10次比一次读取10000字符慢90%左右。<br>鉴于此，从localStorage读取数据的最佳策略是使用尽可能少的键值，存储尽可能多的数据。</p><h4 id="跟进"><a href="#跟进" class="headerlink" title="跟进"></a>跟进</h4><p>localStorage是一个同步API，这本身使浏览器实现这个API时捉襟见肘。<br>所有的localStorage数据都存储在磁盘文件上。这意味着，为了让您可以用JavaScript访问这些数据，浏览器必须先将该文件读取到内存中。<br>当第一次访问localStorage就可能产生性能问题，但在随后的读取操作中浏览器有可能会冻结。在处理少量数据时，这可能不是一个大问题，但如果你已经达到5MB限制时，就会有明显的影响。</p><h3 id="内联不是万能的"><a href="#内联不是万能的" class="headerlink" title="内联不是万能的"></a>内联不是万能的</h3><h4 id="没有浏览器缓存"><a href="#没有浏览器缓存" class="headerlink" title="没有浏览器缓存"></a>没有浏览器缓存</h4><p>将所有内容内联起来最明显的问题就是缓存损失。如果HTML承载了所有资源，HTML自身是不可以缓存的，所有资源每次都要下载一遍。<br>即使HTML是可缓存的，但它的缓存时间也是页面中所有资源缓存时间中最短的。假如你的HTML可以缓存10分钟，页面中另有一个资源可以缓存1天，显然你还是将资源缓存时间缩短到10分钟了。</p><h4 id="没有边缘缓存"><a href="#没有边缘缓存" class="headerlink" title="没有边缘缓存"></a>没有边缘缓存</h4><p>CDN的传统价值被称作边缘缓存。直接从CDN获取缓存资源远比从源服务器获取更加快速。</p><p><em>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</em><br><em>——<a href="http://www.cnki.com.cn/Article/CJFDTotal-JSYW201714052.htm" target="_blank" rel="noopener">企业防御DDoS攻击需要多管齐下</a></em></p><p>即使是首次访问的用户，内联资源的方式也要比引用资源的方式体验更差。当客户浏览器位置离你的服务器很远的时候，效果尤其明显。</p><h4 id="没有按需加载"><a href="#没有按需加载" class="headerlink" title="没有按需加载"></a>没有按需加载</h4><p>所谓按需加载即只加载需要的资源。虽然资源被引用了，但并没有真的被下载，直到条件满足才会被下载。</p><p>浏览器提供了一个内置的按需加载CSS图像的机制。如果一个CSS规则引用了一张背景图片，即使页面中有多个元素匹配了这个规则，浏览器也只会下载一次这张图片。另一个按需加载图像的例子，只加载滚动到的可见区域的图片。</p><p>因为内联资源是在服务端已经决定的，所以按需加载不会对它产生效果。<br>这就意味着不管客户端是否需要，所有图片和CSS都会被嵌入到页面中返回回来。</p><h4 id="浏览器预加载失效"><a href="#浏览器预加载失效" class="headerlink" title="浏览器预加载失效"></a>浏览器预加载失效</h4><p>如果你的网站在HTML的底部引用了<code>http://www.3rdparty.com/code.js</code>，浏览器可能会解析<code>www.3rdparty.com</code>的DNS，甚至需要执行这个文件之前就开始下载它。</p><p>如果你大量地使用内联，HTML就会变大，有可能超过0.5MB。下载的时候，浏览器就不能预加载那些你无法内联的第三方工具资源。</p><h4 id="不完美的解决方案：只在第一次访问时采用内联方式"><a href="#不完美的解决方案：只在第一次访问时采用内联方式" class="headerlink" title="不完美的解决方案：只在第一次访问时采用内联方式"></a>不完美的解决方案：只在第一次访问时采用内联方式</h4><ul><li>用户首次访问你的网站时，把所有的资源内联起来并且为用户设置一个cookie，页面加载时，将所有资源以单独的文件下载，或者将数据存储到脚本缓存中。</li><li>当用户再次访问页面时发现存在cookie，服务器就意识到客户端已经存在缓存，数据就不需要内联到页面中返回。</li><li>缺陷：在现实中，网站的缓存状态是非常不稳定的，用户的缓存最多不会缓存超过一天</li></ul><p>另一方面，Cookies通常存活到你设定的失效时间为止。</p><p>另一个明显的问题就是并不是所有的CDN都支持通过cookie辨别不同的缓存。</p><h4 id="总结和建议"><a href="#总结和建议" class="headerlink" title="总结和建议"></a>总结和建议</h4><p>事实上，减少页面请求数是提高网站速度的绝佳方法，但不是唯一的方法。如果过度实施，将适得其反，它将拖慢网站的速度，而不是提高速度。</p><p>下面是使用内联方式的几个建议：</p><ol><li>非常小的文件需要内联起来（不应该内联超过4KB的文件）</li><li>页面中的图片（如从页面中引用的图片，而非CSS引用的图片）应该尽量不要内联</li><li>如果不是首屏至关重要的内容都不应该被内联起来</li><li>小心内联CSS图片</li><li>不要仅仅依靠综合测试——使用RUM（真实用户监控）</li></ol><h3 id="加载异步脚本的艺术"><a href="#加载异步脚本的艺术" class="headerlink" title="加载异步脚本的艺术"></a>加载异步脚本的艺术</h3><p>参考资料：<br><a href="https://yuiblog.com/blog/2008/07/22/non-blocking-scripts/" target="_blank" rel="noopener">Non-blocking JavaScript Downloads 非阻塞JavaScript加载</a><br><a href="https://calendar.perfplanet.com/2010/the-truth-about-non-blocking-javascript/" target="_blank" rel="noopener">The truth about non-blocking JavaScript 关于非阻塞JavaScript的事实</a></p><h4 id="Facebook插件JS-SDK"><a href="#Facebook插件JS-SDK" class="headerlink" title="Facebook插件JS SDK"></a>Facebook插件JS SDK</h4><p>从第三方代码提供者的角度考虑：<br>插件配置实例：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 立即执行函数，不会污染到全局的命名空间 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 第一行，函数接受<span class="token number">3</span>个参数，在代码最后一行函数被调用。 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 将多次使用的document对象赋值给d，使整个代码片段更短， <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 同时，由于变量d是局部变量，查找起来比全局变量更快，还轻微提升了代码性能 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 声明js变量，并在页面上查找第一个可用的script标签元素赋给fjs</span>  <span class="token keyword">var</span> js<span class="token punctuation">,</span> fjs <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 检查脚本是否已经加载到页面中，防止重复加载</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建script标签并给其ID赋值</span>  js <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> js<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置script标签的地址，这里的URL缺少协议类型，意味着这个脚本将采用当前页面使用的协议加载</span>  <span class="token comment" spellcheck="true">// 如果当前页面使用http://，这个脚本文件的加载会相对快一些</span>  <span class="token comment" spellcheck="true">// 如果当前页面使用https://，你将不会受到关于混合内容的安全提示</span>  js<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"//content.facebook.net/en_US/all.js#xfbml=1"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将新创建的js元素添加到当前页面的DOM中，新创建的js被插入到body元素和fjs元素之间</span>  <span class="token comment" spellcheck="true">// parentNode.insertBefore兼容性最好，相对于</span>  <span class="token comment" spellcheck="true">// (document.head || document.getElementsByTagName('head')[0]).appendChild(js)</span>  <span class="token comment" spellcheck="true">// document.body.appendChild(js)</span>  <span class="token comment" spellcheck="true">// document.documentElement.firstChild.appendChild(js)</span>  fjs<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>js<span class="token punctuation">,</span> fjs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">'script'</span><span class="token punctuation">,</span> <span class="token string">'facebook-jssdk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>如果我是代码片段的使用者，拥有页面标记的控制权：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> js <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  js<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://example.org/my.js'</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span>d<span class="token punctuation">.</span>head <span class="token operator">||</span> d<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>默认设置：</p><pre class=" language-js"><code class="language-js">js<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>js<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span>js<span class="token punctuation">.</span>language <span class="token operator">=</span> <span class="token string">'JavaScript'</span><span class="token punctuation">;</span></code></pre><p>这意味着，新创建的script标签已经是异步非阻塞的了。</p><h3 id="自动化网站性能优化"><a href="#自动化网站性能优化" class="headerlink" title="自动化网站性能优化"></a>自动化网站性能优化</h3><p>压缩合并CSS出现的问题：<br>大多数浏览器在碰到语法错误时，会立即停止解析当前CSS文件。当你盲目地合并CSS文件时，那些之前位于文件底部的错误，现在就处于合并之后的大文件的中间位置。这样，之前一个无关紧要的小问题，现在就可能是破坏站点整体布局的罪魁祸首。</p><h3 id="前端单点故障-frontend-SPOF"><a href="#前端单点故障-frontend-SPOF" class="headerlink" title="前端单点故障 frontend SPOF"></a>前端单点故障 frontend SPOF</h3><p><a href="http://www.stevesouders.com/blog/2010/06/01/frontend-spof/" target="_blank" rel="noopener">前端SPOF</a></p><p>例子：<br>浏览器花了很长时间下载anywhere.js，原因是这个脚本的来源域<code>platform.twitter.com</code>被屏蔽了。由于脚本会阻塞后续DOM元素的加载，我们猜测anywhere.js是在HEAD中以阻塞模式加载的。查看源码证实确实如此。<br>解决：使用异步方式加载</p><h4 id="引起前端单点故障的原因"><a href="#引起前端单点故障的原因" class="headerlink" title="引起前端单点故障的原因"></a>引起前端单点故障的原因</h4><p>任何需要很长时间返回的脚本、样式文件和字体文件都会引起前端单点故障。单点故障通常是由中断或其他类型的失败引发的，比如服务器超载，HTTP请求在服务器队列中一直没有得到响应，造成浏览器响应超时。<br>引起前端单点故障的真正原因是以阻塞的方式加载脚本、样式文件和字体文件。</p><h4 id="避免前端单点故障"><a href="#避免前端单点故障" class="headerlink" title="避免前端单点故障"></a>避免前端单点故障</h4><p>避免前端单点故障的最好方法就是异步加载脚本文件。许多流行的第三方组件默认采用异步的加载方式。</p><p>另一种解决办法就是将你的组件用iframe包裹起来。</p><h4 id="字体文件"><a href="#字体文件" class="headerlink" title="字体文件"></a>字体文件</h4><blockquote><p><a href="http://www.phpied.com/gzip-your-font-face-files/" target="_blank" rel="noopener">Gzip your @font-face files 压缩你的字体文件</a></p></blockquote><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'gzipper'</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">/* 给字体取个名字 */</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url(yanone.eot)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/* 适配IE */</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token function">local</span><span class="token punctuation">(</span><span class="token string">'gzipper'</span><span class="token punctuation">)</span>,        <span class="token url">url(yanone.ttf)</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 使用ttf字体文件，几乎适配所有浏览器 */</span>  <span class="token comment" spellcheck="true">/* 如果需要otf字体文件，otf是ttf向后兼容 */</span>  <span class="token comment" spellcheck="true">/* src: local('gzipper'),        url(yanone.otf) format('opentype'); */</span>  <span class="token comment" spellcheck="true">/* 如果需要svg字体文件，svg字体文件适用于Chrome，也可以替代或补充ttf */</span>  <span class="token comment" spellcheck="true">/* src: local('gzipper'),        url(yanone.svg) format('svg'); */</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> gzipper<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>必要字体文件格式：<ul><li>svg</li><li>ttf (FF 3.5，Opera 10，Safari 4，Chrome)</li><li>otf</li><li>eot (IE)</li></ul></li><li>总是发送gzip字体文件，平均节省40%的文件大小，甚至可能节省高达70%的大小</li><li>深入了解WEFT以确保您创建压缩的EOT（创建EOT的另一个选择是使用免费的开源工具ttf2eot并将TTF转换为EOT。）</li><li>请密切关注您即将使用的字体文件大小，它们可能非常庞大。如果您有选择，请选择10K字体文件，而不是1.5M字体文件</li></ul><blockquote><p>关于字体引起故障的解决方案：<a href="http://www.stevesouders.com/blog/2009/10/13/font-face-and-performance/" target="_blank" rel="noopener">@font-face and performance</a></p></blockquote><p><strong>@font-face 性能建议</strong><br>我的第一条建议是避免使用@font-face，除非它对页面至关重要。</p><p>这个建议的主要原因是如果在@font-face声明上面有一个<code>&lt;script&gt;</code>标记，那么字体文件将阻止IE中整个页面的呈现，直到它们完成下载。<br>样式表也存在阻止渲染问题。<br>但样式表为整个页面的所有方面提供样式，而字体文件只添加一个东西——自定义字体。</p><p>如果您没有被FOUT和中断问题所阻止，并希望继续使用@font-face，我建议<strong>推迟字体文件下载</strong>，直到页面呈现后再下载。<br>这解决了IE中的问题——页面渲染，然后在后台下载字体并在程式化文本到达时增强它们。这种技术在其他浏览器中也有好处。通过延迟加载字体文件，不会触发大多数浏览器忙指示符。<br>延迟加载代码如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">lazyload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> sRule1 <span class="token operator">=</span>    <span class="token string">"@font-face {"</span> <span class="token operator">+</span>    <span class="token string">"  font-family: 'Yanone';"</span> <span class="token operator">+</span>    <span class="token string">"  src: url('/bin/resource.cgi?type=font&amp;sleep=6');"</span> <span class="token operator">+</span>    <span class="token string">"  src: local('Yanone'), "</span> <span class="token operator">+</span>                <span class="token string">"url('/bin/resource.cgi?type=font&amp;sleep=6') "</span> <span class="token operator">+</span>                <span class="token string">"format('truetype');"</span> <span class="token operator">+</span>    <span class="token string">"}"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> style1 <span class="token operator">=</span> document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token string">"function"</span> <span class="token operator">===</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>style1<span class="token punctuation">.</span>insertRule<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Firefox, Safari, Chrome</span>    style1<span class="token punctuation">.</span><span class="token function">insertRule</span><span class="token punctuation">(</span>sRule1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token string">"string"</span> <span class="token operator">===</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>style1<span class="token punctuation">.</span>cssText<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// IE</span>    style1<span class="token punctuation">.</span>cssText <span class="token operator">=</span> sRule1<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是一个原型，而不是一个强化的解决方案。</p><h3 id="高性能原生移动应用"><a href="#高性能原生移动应用" class="headerlink" title="高性能原生移动应用"></a>高性能原生移动应用</h3><p>为了分析移动app的网络流量，首先在电脑上建立一个点对点的Wi-Fi网络，把你的移动设备连接到这个网络并在电脑抓包。<br>然后使用Wireshark类似的应用检查你的应用产生的网络流量，或者把得到的抓包载入到类似PcapPerf的工具。<br>还有一种方法，即使用代理，类似Charles Proxy和Fiddler，但是请注意这样有可能会影响你的app的网络行为，比如限制并发连接数。</p><h4 id="注意你的瀑布流"><a href="#注意你的瀑布流" class="headerlink" title="注意你的瀑布流"></a>注意你的瀑布流</h4><p>通过检查HTTP瀑布流发现问题。比如：</p><ul><li>问题：图片阻塞并行下载<br>Web开发者通过简单的调整就可以期待浏览器厂商实现并行下载，而原生app开发者需要自己做出最佳并行下载方案。我们经过调查发现，即使在移动网络上，你也可以通过使用4个并行下载提升性能，高级用户还可以切换到HTTP管线化从而再次提速。</li></ul><h4 id="压缩这些资源"><a href="#压缩这些资源" class="headerlink" title="压缩这些资源"></a>压缩这些资源</h4><ul><li>问题：servies.xml大小为81KB，花费一秒钟从网络上获取（阻塞任何其后的资源）<br>光下载这一文件就花了812毫秒，查看响应头就知道这一文件发送前未压缩。假设经过压缩，这一文件只有6KB大小，可以节省至少半秒的响应时间。</li></ul><h4 id="不要重复下载"><a href="#不要重复下载" class="headerlink" title="不要重复下载"></a>不要重复下载</h4><ul><li>问题：图片重复下载<br>当实现一个原生app时，实现一套基本的缓存机制的责任就落到了开发者身上。仅仅设置http响应的缓存头部通常是不够的。创建一个缓存层来在应用运行期间将元素缓存到内存中，能极大提升性能。</li></ul><h4 id="太多图片会减慢你的速度么"><a href="#太多图片会减慢你的速度么" class="headerlink" title="太多图片会减慢你的速度么"></a>太多图片会减慢你的速度么</h4><p>Hipmunk，一款流行的航班搜索应用，使用时会下载一个巨大数据文件，压缩后文件大小为650KB，包含了整个搜索结果。<br>更好的做法是把这个文件分割成好几个小文件，其中一部分可以异步加载。<br>其他应用下载许多非常小的文件，而这些文件本来可以轻易合并成几个稍大文件，从而避免由于移动网络的高延迟导致的性能危机。</p><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>这些例子说明了性能良好的原生移动app和网站遵循的原则并没有想象中那么不同。<br>去除不必要的下载（无论是字节数还是请求数），剩下的就是借助并行和异步加载更好地利用网络。<br>如果有一个重要的结论，它就是：总是尽早测试你的app，别想碰运气。</p><h3 id="纯CSS3图片"><a href="#纯CSS3图片" class="headerlink" title="纯CSS3图片"></a>纯CSS3图片</h3><h4 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h4><p>为了对比真正的图片文件和CSS3生成的图片，我做了几张页面，每一张都只包含一张图片，真正图片URL和dataURI或者纯CSS3图片。</p><h4 id="加载成本"><a href="#加载成本" class="headerlink" title="加载成本"></a>加载成本</h4><p>由于这些页面存储在我本地Apache服务器上，我能通过curl获取它们的压缩和未压缩版本（设置Accept-Encoding为gzip，deflate），得到未压缩的CSS3，data URI和真正图片URL页面内容的长度。</p><ul><li><em>curl：一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具</em></li></ul><h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><p>在这些页面底部添加一小段脚本，这段脚本会以1秒的间隔重复加载这个页面100次，利用sessionStorage计数，并配合Chrome开发者工具的时间轴面板记录页面活动信息，我可以导出这些日志数据。然后借助NodeJS脚本，我提取和过滤出只与渲染活动相关的时间数据，去掉上下各5%的噪音数据样本，就得到了毫秒单位的平均值。</p><p>CSS3生成的图片相比无论普通的图片URL还是data URI，加载成本更小。在YSlow logo例子中，遵循W3C标准的CSS3几乎比PNG24图片小34倍。<br>同一图片，压缩后的data URI版的加载成本大致一样，高出只有几字节大小。</p><p>另一方面，CSS3生成的图片的渲染时间比普通图片更长，大约是PNG24版本的6.5倍。遵循W3C标准的CSS3版本的渲染比带有-webkit-或者所有浏览器厂商前缀版本快2.5倍。<br>行内版的渲染时间是对应普通图片版的两倍还多。</p><h4 id="达到我们的目标了么"><a href="#达到我们的目标了么" class="headerlink" title="达到我们的目标了么"></a>达到我们的目标了么</h4><p>事实上，我们并没有真正达到目的。因为首先要解决特定浏览器前缀问题，能在所有浏览器通用，然后要手工利用DOM元素和样式画图，相当耗时——SVG是为此设计的。<br>这类任务迫切需要一个画图工具辅助，这样，人们就可以拖动<a href="https://pomax.github.io/bezierinfo/zh-CN/" target="_blank" rel="noopener">贝塞尔曲线</a>并调整控制点来得到相应的正确的CSS3边框圆角形状的几何线条。</p><h3 id="Android-2-x设备中下载无用背景图片"><a href="#Android-2-x设备中下载无用背景图片" class="headerlink" title="Android 2.x设备中下载无用背景图片"></a>Android 2.x设备中下载无用背景图片</h3><h4 id="无法解决"><a href="#无法解决" class="headerlink" title="无法解决"></a>无法解决</h4><p>没有避免的方法，所以有如下两条指导准则。</p><ul><li>在CSS中，只给id选择器添加背景图片</li><li>避免给同一元素使用多个设置了背景图片的选择器，也就是说不层叠的样式表</li></ul><h3 id="网络计时"><a href="#网络计时" class="headerlink" title="网络计时"></a>网络计时</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigation_timing_API" target="_blank" rel="noopener">Navigation Timing 导航计时</a><br><a href="https://www.w3.org/TR/navigation-timing/" target="_blank" rel="noopener">规范</a></p><ul><li>使用Navigation Timing来测量页面加载时间：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> page_load_time <span class="token operator">=</span> now <span class="token operator">-</span> performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>navigationStart<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"User-perceived page loading time: "</span> <span class="token operator">+</span> page_load_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onLoad()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>浏览器兼容性：</p><ul><li>桌面</li></ul><table><thead><tr><th>Feature</th><th>Chrome</th><th>Firefox (Gecko)</th><th>Internet Explorer</th><th>Opera</th><th>Safari</th></tr></thead><tbody><tr><td>Basic support</td><td>6.0</td><td>7 (7)</td><td>9</td><td>15.0</td><td>8</td></tr></tbody></table><ul><li>移动端</li></ul><table><thead><tr><th>Feature</th><th>Android</th><th>Firefox Mobile (Gecko)</th><th>IE Mobile</th><th>Opera Mobile</th><th>Safari Mobile</th></tr></thead><tbody><tr><td>Basic support</td><td>4.0</td><td>15 (15)</td><td>9</td><td>15.0</td><td>8</td></tr></tbody></table><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API" target="_blank" rel="noopener">User Timing 用户计时</a><br><a href="http://www.chinaw3c.org/archives/357/" target="_blank" rel="noopener">W3C发布性能时间基线(Performance Timeline)和用户定时(User Timing)的正式推荐标准</a></p><p>user Timing例子:</p><iframe id="cp_embed_oKMKPq" src="//codepen.io/siluo2000/embed/oKMKPq?height=500&theme-id=dark&slug-hash=oKMKPq&default-tab=js,result&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="导航计时-API实践"><a href="#导航计时-API实践" class="headerlink" title="导航计时 API实践"></a>导航计时 API实践</h3><h4 id="为什么要关心这些"><a href="#为什么要关心这些" class="headerlink" title="为什么要关心这些"></a>为什么要关心这些</h4><p>监控真实用户很关键，因为它能通过浏览器、地址以及网络得到真实用户体验的最精准的信息。这是唯一真正能度量缓存策略对用户体验的影响的方法。</p><h4 id="收集导航计时时间戳并将它们转为有用的度量值"><a href="#收集导航计时时间戳并将它们转为有用的度量值" class="headerlink" title="收集导航计时时间戳并将它们转为有用的度量值"></a>收集导航计时时间戳并将它们转为有用的度量值</h4><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getPerfStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> timing <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    dns<span class="token punctuation">:</span> timing<span class="token punctuation">.</span>domainLookupEnd <span class="token operator">-</span> timing<span class="token punctuation">.</span>domainLookupStart<span class="token punctuation">,</span>    connect<span class="token punctuation">:</span> timing<span class="token punctuation">.</span>connectEnd <span class="token operator">-</span> timing<span class="token punctuation">.</span>connectStart<span class="token punctuation">,</span>    ttfb<span class="token punctuation">:</span> timing<span class="token punctuation">.</span>responseStart <span class="token operator">-</span> timing<span class="token punctuation">.</span>connectEnd<span class="token punctuation">,</span>    basePage<span class="token punctuation">:</span> timing<span class="token punctuation">.</span>responseEnd <span class="token operator">-</span> timing<span class="token punctuation">.</span>responseStart<span class="token punctuation">,</span>    frontEnd<span class="token punctuation">:</span> timing<span class="token punctuation">.</span>loadEventStart <span class="token operator">-</span> timing<span class="token punctuation">.</span>responseEnd  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="使用Google分析作为性能数据仓库"><a href="#使用Google分析作为性能数据仓库" class="headerlink" title="使用Google分析作为性能数据仓库"></a>使用Google分析作为性能数据仓库</h4><p><a href="https://marketingplatform.google.com/about/analytics/" target="_blank" rel="noopener">Google Analytics</a>是互联网上最流行的免费网站分析系统。简称GA。</p><h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><p>1.缺少浏览器覆盖范围<br>有些浏览器中不支持Navigation Timing特性，而缺乏特定浏览器数据的影响很大。</p><p>2.缺少对象级别的数据<br>在写书时（2011年）没有主流浏览器支持Resource Timing。</p><p>3.受Google分析报告系统能力的限制</p><h3 id="考虑移动界面的性能"><a href="#考虑移动界面的性能" class="headerlink" title="考虑移动界面的性能"></a>考虑移动界面的性能</h3><h4 id="电池寿命"><a href="#电池寿命" class="headerlink" title="电池寿命"></a>电池寿命</h4><p>大多数用户都知道打电话以及使用GPS会消耗电量，但很少有人知道有些网站比其他网站更耗电。<br>管理CPU使用量，避免重绘，最小化JavaScript的尺寸和活动，制作动画时总是使用CSS而不是JavaScript，最后，即使设备支持也永远不要在移动设备上使用WebGL。</p><h4 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h4><p>关于延迟必须知道的是，与那些固定设备或使用WiFi访问互联网的设备相比，延迟对移动设备上的下载速度影响巨大。真实的速度与丢包和延迟有很大关系。空气——包从移动设备传到手机基站的介质是延迟的主因。<br>由于延迟的影响，在移动领域，减少DNS查询以及HTTP请求是非常重要的。这就带来了第一个性能优化反模式：嵌入样式表以及脚本。</p><h4 id="嵌入CSS和JS：最佳实践"><a href="#嵌入CSS和JS：最佳实践" class="headerlink" title="嵌入CSS和JS：最佳实践"></a>嵌入CSS和JS：最佳实践</h4><p>为了减少延迟对移动站点的负面影响，可以让Web应用只用一个单独的HTTP请求就得到所有HTML、CSS、JS以及图片，实现步骤如下所示：</p><ul><li>在首次加载时嵌入CSS及JS</li><li>将上面的资源解压保存在localStorage中</li><li>将解压后的文件的文件名保存在cookie中</li><li>后续请求中，服务器检查对应的cookie</li><li>根据cookie的值，只嵌入新的或丢失的脚本</li><li>加载时，从localStorage资源中载入文件</li></ul><p>从localStorage中提取数据是性能的一个重大提升。不过在移动端，与延迟相比它作用有限，尤其当延迟是由宽带受限造成的。</p><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>在移动世界，只关注花了多少时间才完成是不够的。<br>设备上跑着的程序越多，你的Web应用可以使用的内存就越少。高内存占用会导致UI变慢，一旦浏览器内存不足，那应用也就内存不足了，这时，移动浏览器通常会关闭或崩溃以便释放内存。</p><h5 id="优化图片"><a href="#优化图片" class="headerlink" title="优化图片"></a>优化图片</h5><p>在内存有限的情况下，你还必须考虑图片文件解压后有多大。所有的图片都会消耗内存。<br>合成图像使用GPU内存而不是CPU内存，虽然这可能是一种释放些许内存的技巧，但合成图片所需的内存是对应的非合成图片的4倍，因此，不要常用这种技巧。</p><p>我建议你的Web应用中同时使用的文件（当前显示的JS、CSS、HTML以及图片）不要超过80MB。</p><h5 id="权衡CSS的好处"><a href="#权衡CSS的好处" class="headerlink" title="权衡CSS的好处"></a>权衡CSS的好处</h5><p>使用渐变、圆角、盒阴影及文字阴影，以及图片边框，可以大大地减少HTTP的请求数。CSS的好处有：</p><ul><li>更少的HTTP请求</li><li>可更新</li><li>可扩展</li><li>可使用过渡效果</li><li>可使用动画</li></ul><p>不过，在屏幕上展示这些效果也是有成本的，有时候，使用png、gif或jpeg可以比CSS渲染得更快并且占用的内存更少。<br>带过渡特性的CSS一般会在每次重排或重绘时重新计算，这会耗尽内存。png、gif或jpeg以位图的方式渲染并过渡，使用的内存通常更少（但会有更多的HTTP请求）。</p><p>对径向渐变及内阴影来说，就需要评估下它们的性能与下载对应图片的成本对比了。<br>要注意有些CSS特性在内存使用及渲染速度方面会有隐性的成本。</p><h5 id="GPU的好处及陷阱"><a href="#GPU的好处及陷阱" class="headerlink" title="GPU的好处及陷阱"></a>GPU的好处及陷阱</h5><p>在一些设备上，将一个元素过渡或转换到3维空间时，这个元素会使用硬件加速。通过将元素渲染从CPU转移到GPU的方式，可以大幅提升性能，尤其在动画中。<br>不过，硬件加速元素是复合性的，而这种元素会占用4倍的内存。使用GPU代替CPU能提升性能，但也有上限。</p><p>使用硬件加速的元素虽然使用的内存（RAM）较少，但它们会用尽显存，因此，使用<code>transform: translateZ(0)</code>技巧要谨慎。</p><h5 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h5><p>移动设备的视口就是屏幕的可见区域。<br>绘制到页面上的内容，即使现在不在视口内，也仍然会占用内存。</p><h5 id="最小化DOM"><a href="#最小化DOM" class="headerlink" title="最小化DOM"></a>最小化DOM</h5><p>读写DOM操作的成本是昂贵的，因此请将它们缓存起来，保存到变量中。<br>同样的，批量DOM查询及操作时应分开操作，可以先在外部更新好DOM的内容，再更新对应的节点，以便将DOM的操作减至最少。</p><h4 id="UI响应"><a href="#UI响应" class="headerlink" title="UI响应"></a>UI响应</h4><p>在用户做了某个操作后，很重要的一点是在200毫秒内给用户一个反馈。如果是显示或隐藏一个元素，就不需要提供反馈了，因为应用本身会响应。</p><p>另外，由于移动设备是一种触摸设备，“双触摸”是一种可能的用户操作，事实上在第一次触摸之后，移动设备会等待可能的第二次触摸，然后才响应用户的操作。<br>在IOS设备上，在触摸事件真正生效之前大约有300毫秒的等待时间。考虑到这一点，你可能希望处理默认事件，比如添加一个监听触摸结束事件（touchend）的函数来处理轻击（tap）操作，以便让你的应用响应更快。</p><h3 id="超越Web开发者工具：Strace"><a href="#超越Web开发者工具：Strace" class="headerlink" title="超越Web开发者工具：Strace"></a>超越Web开发者工具：Strace</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>下面的调用将打印出用Google Chrome访问google.com时产生的所有系统调用：</p><pre class=" language-powershell"><code class="language-powershell">strace <span class="token operator">-</span>f <span class="token operator">-</span>ttt <span class="token operator">-</span>T google<span class="token operator">-</span>chrome http:<span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span></code></pre><ul><li>-f 用于跟踪子进程（fork）</li><li>-ttt 用于打印出每个调用的时间戳</li><li>-T 用于打印出每个调用的耗时</li></ul><h4 id="校正"><a href="#校正" class="headerlink" title="校正"></a>校正</h4><p>运行上面的命令时，你可能会被现代Web浏览器所产生的潮水般的调用信息淹没。要过滤出感兴趣的内容，可以用-e参数。<br>例如只想看文件或网络访问，则可以使用-e trace=file或-e trace=network。</p><h4 id="示例：本地存储"><a href="#示例：本地存储" class="headerlink" title="示例：本地存储"></a>示例：本地存储</h4><pre class=" language-powershell"><code class="language-powershell">strace <span class="token operator">-</span>f <span class="token operator">-</span>T <span class="token operator">-</span>p _&lt;<span class="token keyword">process</span> id>_ <span class="token operator">-</span>e trace=open<span class="token punctuation">,</span>read<span class="token punctuation">,</span>white</code></pre><h3 id="mod-spdy"><a href="#mod-spdy" class="headerlink" title="mod_spdy"></a>mod_spdy</h3><p>SPDY协议能让网站更高效地传送到浏览器上，这能让页面加载时间有高达55%的提升。<br>mod_spdy是一个Apache HTTP Server的开源模块，为Apache HTTP服务提供了SPDY支持。<br>SPDY与性能相关的一个重要特性是<strong>多路复用</strong>，允许在一个单独的SPDY会话中发起多个并发请求，对应的响应将交错下载。</p><h3 id="CommonJS模块的惰性求值"><a href="#CommonJS模块的惰性求值" class="headerlink" title="CommonJS模块的惰性求值"></a>CommonJS模块的惰性求值</h3><h4 id="深入理解Text-JavaScript类型"><a href="#深入理解Text-JavaScript类型" class="headerlink" title="深入理解Text/JavaScript类型"></a>深入理解Text/JavaScript类型</h4><p>本地未缓存的JavaScript资源的获取、解析及执行：</p><pre class="mermaid">graph TD;  Latency-->Download;  Download-->Parsing;  Parsing-->Evaluation;</pre><p>已缓存的JavaScript资源的获取、解析及执行：</p><pre class="mermaid">graph TD;  HTTP-cache-hit-->Parsing;  Parsing-->Evaluation;</pre><p>这儿值得注意的不是缓存显著的收益，而是无论存不存在缓存，每次页面加载时JavaScript文件都需要解析与执行。</p><h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4><p>解决初始化延迟的常用推荐方案是按需加载脚本。<br>不过，这个方法也有很多不足。首先，无法保证代码能正常加载——网络或服务器此时可能会不可用了。<br>其次，代码传输的速度取决于网络质量，差异可能非常大。<br>最后，代码是异步加载的。<br>这些不足迫使开发者需要同时考虑到防御性及异步性，实现与分发机制也不得不绑定在一起。</p><h4 id="用延迟执行来挽救"><a href="#用延迟执行来挽救" class="headerlink" title="用延迟执行来挽救"></a>用延迟执行来挽救</h4><p>延迟执行只专注于推迟解析与执行的步骤，从而避免了这些问题。<br>为了避免它在页面初始化时执行，可以将它注释掉，或者将它转为一个字符串。<br>与字符串形式的代码相比，注释的代码性能稍微好一点。不过，如果不是以内联方式嵌入，注释的代码提取起来会很复杂。另外，它也比较容易出错，已知有一些手机浏览器会去掉JavaScript注释。更推荐使用字符串形式。</p><h4 id="在CommonJS模块中创建懒执行"><a href="#在CommonJS模块中创建懒执行" class="headerlink" title="在CommonJS模块中创建懒执行"></a>在CommonJS模块中创建懒执行</h4><p>就实现而言，要在CommonJS模块中开启懒执行，需要修改运行时，以便它可以正确地执行并包装那些字符串化形式的模块。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'require'</span><span class="token punctuation">,</span> <span class="token string">'exports'</span><span class="token punctuation">,</span> <span class="token string">'module'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这意味着懒执行的模块在服务端创建之时、传送之前就已经被转码。</p><h3 id="关于接受建议的建议"><a href="#关于接受建议的建议" class="headerlink" title="关于接受建议的建议"></a>关于接受建议的建议</h3><ul><li>使用第三方内容意味着你不再能控制所有可能影响页面加载时间的因素。即使是一个井然有序的、设置良好并且优化过的站点，也有可能因为第三方内容的问题而产生糟糕的用户体验。</li><li>当一个HTTPS页面引用了HTTP内容时，就会出现混合内容警告。</li><li>SSL很棒，但是也有成本。若无必要请勿使用。<ul><li><strong>创建HTTPS连接比常规HTTP连接花费的时间更多</strong>。在SSL连接开始之前，可能需要发送额外的请求到其他服务器，以便验证X.509证书链，这会阻塞后面所有的向这个服务器的连接。</li><li><strong>建立HTTPS连接需要更多的计算</strong>。在SSL握手期间，浏览器及服务器都必须做大量的工作，发送时还有更多的编码和解码的工作。</li><li>由于HTTPS和HTTP运行在不同的TCP/IP端口上，因此浏览器不能将现有的HTTP连接用于HTTPS连接，即使正在访问的是同一个主机。</li><li>使用SSL意味着共享缓存服务器等内联设备将看不到相应的通信，也无法用于提升性能。</li><li><strong>浏览器缓存SSL的内容比缓存HTTP的内容复杂很多</strong>。取决于浏览器及其配置，内容可能只会在内存中缓存并很快被丢弃，或者要启用通常不需要的条件请求。</li></ul></li></ul><p>这个问题的解决方案是使用相对协议URL。相对协议URL是一种不指定检索协议来引用不同主机上的资源的方法。也就是使用<code>//xx.js</code>代替<code>https://xx.js</code>或<code>http://xx.js</code>。</p><h3 id="为什么你对性能测试结果的解读可能是错误的（至少你在大公司里工作）"><a href="#为什么你对性能测试结果的解读可能是错误的（至少你在大公司里工作）" class="headerlink" title="为什么你对性能测试结果的解读可能是错误的（至少你在大公司里工作）"></a>为什么你对性能测试结果的解读可能是错误的（至少你在大公司里工作）</h3><p>我们的思维很自然地把重点聚焦在数据上，而不是数据来源的可靠性上。更让我惊讶地是，我们忽视了样本量的重要性。我们是失败的凭直觉分析问题的统计学家。我们对样本的大小或如何衡量测试结果不够敏感。</p><ol><li>我们需要工具来提醒我们的样本数量太小。</li><li>均值是一种错误的衡量RUM结果的方法。</li><li>直方图是最好的图像化数据分析工具。</li></ol><h3 id="有损图像压缩"><a href="#有损图像压缩" class="headerlink" title="有损图像压缩"></a>有损图像压缩</h3><p>有很多种优化图片的方法，如压缩、拼接（Spriting）、选择合适的格式、缩放等。当然还有其他方法，如延迟加载、缓存、区分URL版本、CDN等。</p><p>图像品质值的范围从1到100，75通常对所有图片都比较适合。<br>得到的图片很大程度取决于原始图像和图像的视觉功能，有时甚至可以节省80%的空间，并且无明显的视觉损失。<br>图片压缩工具：<br><a href="https://tinypng.com/" target="_blank" rel="noopener">tinypng</a><br><a href="https://www.jpegmini.com/" target="_blank" rel="noopener">JPEGmini</a><br><a href="https://zhitu.isux.us/" target="_blank" rel="noopener">腾讯智图</a></p><h3 id="基于Selenium和JavaScript的性能测试"><a href="#基于Selenium和JavaScript的性能测试" class="headerlink" title="基于Selenium和JavaScript的性能测试"></a>基于Selenium和JavaScript的性能测试</h3><p>现在很多网站都采用了真实用户监控工具来评测应用程序的性能，如<a href="https://newrelic.com/" target="_blank" rel="noopener">New Relic</a>或<a href="https://www.compuware.com/" target="_blank" rel="noopener">Compuware</a>。这些工具非常实用，能够获取实时的性能参数，让工程师能够识别并最终解决性能瓶颈。</p><p>这非常适合已经部署到互联网上的应用程序，但对预发测试环境中的应用程序又如何呢？<br>再者，对于运行于防火墙环境内的应用程序又如何呢？</p><p>也许我们应该考虑用托管Selenium的解决方案？</p><h3 id="超越带宽：UI性能"><a href="#超越带宽：UI性能" class="headerlink" title="超越带宽：UI性能"></a>超越带宽：UI性能</h3><ul><li>页面加载后：UI层——鲜有人关心CSS选择器的高昂开销，或是当用户滚动页面时由CSS导致的页面严重滞后。UI性能不被重视的原因之一也许是因为无法量化。</li><li>UI性能分析工具：比如Chrome的开发者工具和Opera的调试器Dragonfly已经加入了CSS性能分析工具。</li><li>CSS压力测试：<a href="https://css-tricks.com" target="_blank" rel="noopener">CSS Stress Test</a></li><li>CSS性能分析器：已经应用于浏览器中，可以让我们更深入了解CSS实际执行速度</li><li><a href="http://csslint.net/" target="_blank" rel="noopener">CSS Lint</a></li><li><a href="http://mir.aculo.us/dom-monster/" target="_blank" rel="noopener">DOM Monster</a></li></ul><h4 id="对速度的感知-速度感"><a href="#对速度的感知-速度感" class="headerlink" title="对速度的感知/速度感"></a>对速度的感知/速度感</h4><p>我们多数时候致力于真实性能的提升，但是有时也必须认识到其中的局限性，明白我们并不总能控制带宽，网络延迟或者用户的浏览器性能。我们竭尽所能，但有时不得不造假。“造假直到你能真正提高性能”。</p><p>造假是什么意思？<br>一类情况可能是指预加载内容，例如：移动版Gmail就是在用户单击“显示更多信息……”按钮前就提前加载。用户单击时，内容实际上早已经加载完成。<br>造假也可能是指以简单的方式快速响应用户操作，例如提供一个视觉反馈。</p><p>另一个更聪明的<a href="https://www.youtube.com/watch?v=05C0GQPKA4g" target="_blank" rel="noopener">例子</a>：在页面中加载一个很小的类库，用来捕获页面上所有的事件，将其添加到队列中，并在随后重新执行。最重要的是，这个小类库还提供UI（表示加载进行中的旋转图标），作为用户操作后给出用户反馈，尽管其实什么也没有发生，直到JavaScript准备好后重新执行队列中的事件。</p><h4 id="花絮"><a href="#花絮" class="headerlink" title="花絮"></a>花絮</h4><ul><li>雪碧图减少了HTTP请求，但大的雪碧图会占用过多内存</li><li>纯CSS3图片？虽然减少了带宽，却是以降低了渲染速度为代价。事实证明，图片渲染更快。</li><li>微软的FishIE Tank是一个测试Canvas渲染速度的不错的基准工具，以每秒帧数来衡量。</li><li>CSS渐变比SVG背景渲染速度更快。</li><li>旧版本Webkit浏览器大量使用box shadow在滚动和渲染页面时有延迟问题。有时使用图片虽然会下载更多的数据，却可以换来更好的UI性能。</li><li>CSS径向渐变很不错，而且减少了图片请求，但在某些浏览器中会有渲染问题，特别是Android。</li><li>避免使用IE CSS 滤镜，因为会遇到性能问题。</li><li>尽可能使用硬件加速CSS动画替代JavaScript动画，但注意一些限制（Webkit有1024像素x1024像素的最大尺寸限制）。如果仍然需要使用JavaScript动画，尽可能使用<code>requestAnimationFrame</code>代替<code>setTimeout</code>和<code>setInterval</code>。</li></ul><h3 id="CSS-Selector性能改变了（变得更好了）"><a href="#CSS-Selector性能改变了（变得更好了）" class="headerlink" title="CSS Selector性能改变了（变得更好了）"></a>CSS Selector性能改变了（变得更好了）</h3><ul><li>样式共享</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>假如浏览器引擎已经计算出了第一个段落的样式，那么它就不再需要为第二个段落做同样的计算。</p><ul><li>规则哈希</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">a </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">div p </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">div p<span class="token class">.legal</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#sidebar</span> a </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#sidebar</span> p </span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>上方的样式表被分成了3组：</p><table><thead><tr><th>a</th><th>p</th><th>p.legal</th></tr></thead><tbody><tr><td>a {}</td><td>div p {}</td><td>div p.legal {}</td></tr><tr><td>#sidebar a {}</td><td>#sidebar p {}</td><td></td></tr></tbody></table><p>当浏览器使用规则哈希时，它不再需要检测整个样式表中的所有选择器，而是检测真正有可能匹配的更小范围的几组选择器。<br>它免去了对页面内每一个HTML元素都进行匹配的不必要工作。</p><ul><li>父过滤器</li><li>快速路径</li></ul><h3 id="PhantomJS和confess-js"><a href="#PhantomJS和confess-js" class="headerlink" title="PhantomJS和confess.js"></a>PhantomJS和confess.js</h3><p>我们渴望有一套强大且可靠的方法来评估Web应用程序的性能和用户体验。<br>PhantomJS提供一个无界面的、功能齐全的Webkit浏览器，可以方便地使用命令行来启动，然后可以用JavaScript编写脚本进行操作。<br><a href="https://github.com/jamesgpearce/confess" target="_blank" rel="noopener">confess.js</a>是一个可以让你很容易地根据不同目的分析网页和应用程序的微型库。目前，它有两个主要功能：提供简单的页面性能概况和生成应用程序缓存清单。<br><strong>PhantomJS在2018年4月已经暂停开发</strong></p><h3 id="两次测量一次优化"><a href="#两次测量一次优化" class="headerlink" title="两次测量一次优化"></a>两次测量一次优化</h3><p>测量的关键是工具。从宏观层面开始，你的网站最重要的部分是什么？可能是那个用得最多的部分，或者对业务影响最大的部分（如结算流程）。真正了解网站上哪些页面比较重要的唯一方法是查看统计数据，或者和网站负责人讨论优先级。</p><h4 id="识别需要优化的页面-部分"><a href="#识别需要优化的页面-部分" class="headerlink" title="识别需要优化的页面/部分"></a>识别需要优化的页面/部分</h4><p>先查看哪些网页访问次数最多。这可以让你得到一个明确目标的清单。<br>现在，你应该得到了网站中最热门或对业务最重要的页面或部分内容的列表。这就是你的目标列表。保持这个列表定期更新。直到优化完目标列表而没有产生新的性能问题。</p><h4 id="识别需要优化的功能"><a href="#识别需要优化的功能" class="headerlink" title="识别需要优化的功能"></a>识别需要优化的功能</h4><p>一般来说，我们的目标是找出用户最可能需要哪些东西。作为一种非正式的经验法则，考虑按以下顺序优化加载的项目：</p><ul><li>一屏显示的内容</li><li>导航组件（菜单、搜索栏）</li><li>提供信息的内容（产品介绍、新闻报道）</li><li>操作选项（添加到购物车等）</li><li>一屏之后的内容</li></ul><p>你可以用WebPageTest的电影胶片功能来检查各种内容加载的速度。</p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>如果那些使用率高达90%的功能还没有被优化，那就不要把你所有时间都花费在已经优化了的东西上。<br>优化的目标应该是根据你的测量，然后最合理地利用你的时间来优化用户体验。</p><h3 id="后端问题检测"><a href="#后端问题检测" class="headerlink" title="后端问题检测"></a>后端问题检测</h3><p>抛开顶级互联网发布商，我们转而关注那些使用现成内容管理系统（Drupal、WordPress或Joomal等）来管理的网站。网站拥有者很少或根本没有检查他们的网站所在的系统的实际性能。<br>几乎所有的CMS系统都会有8~20秒的后端时间。</p><h4 id="适当的后端时间该是多少"><a href="#适当的后端时间该是多少" class="headerlink" title="适当的后端时间该是多少"></a>适当的后端时间该是多少</h4><p>对于仅处理后端请求来说，较好的目标时间是100ms。这并不意味着你应该期望TTFB（Time To First Byte，最初的网络请求被发起到从浏览器接收到第一个字节这段时间）为100ms，而是尽量使后端处理时间不宜长于该时间。<br>在使用WebPagetest这样的前端工具来计算后端时间时，你需要记住这个时间还包含网络延迟。因此，我通常采用服务器的套接字连接时间作为RTT（Round-Trip Time，往返时延），并将其作为其他一切评测的基准。<br>在本例中，后端时间 = Time To First Byte - Initial Connection</p><h4 id="搞清楚是怎么回事"><a href="#搞清楚是怎么回事" class="headerlink" title="搞清楚是怎么回事"></a>搞清楚是怎么回事</h4><p>后端问题几乎肯定是由以下因素之一引起的：</p><ul><li>Web服务器配置问题，没有可用资源来处理请求</li><li>低效的数据库查询</li><li>后端调用外部服务</li></ul><h3 id="Web字体性能：-font-face及其他解决方案间的权衡"><a href="#Web字体性能：-font-face及其他解决方案间的权衡" class="headerlink" title="Web字体性能：@font-face及其他解决方案间的权衡"></a>Web字体性能：@font-face及其他解决方案间的权衡</h3><h4 id="字体托管服务与自主开发"><a href="#字体托管服务与自主开发" class="headerlink" title="字体托管服务与自主开发"></a>字体托管服务与自主开发</h4><p>1.字体托管服务<br>Typekit、Fonts.com、Fontdeck等服务为设计师提供一个简单的接口来管理已购买的字体，并产生一个指向用于加载字体的动态CSS或JavaScript文件的链接。谷歌甚至还提供了类似的免费服务。</p><p>2.DIY方式<br>这种方式涉及购买字体的网络使用授权，以及使用类似FontSquirrel这样的工具来优化字体文件大小。</p><h4 id="FOUT是什么"><a href="#FOUT是什么" class="headerlink" title="FOUT是什么"></a>FOUT是什么</h4><p>FOUT（Flash of Unstyled Text），即无样式文本的闪烁，指Web字体下载并渲染之前短暂显示无样式文本的情况。<br>FOUT以某种形式存在于Internet Explorer所有版本和Firefox 3.6及更低级版本中。<br>为避免FOUT，我的建议是：</p><ul><li>将字体托管在一个CDN上</li><li>GZIP压缩所有字体文件，.woff文件除外（已压缩）</li><li>通过增加缓存过期头来缓存字体文件30天</li><li>从字体文件移除多余的字形</li><li>确保@font-face是页面中第一个样式表的第一条规则（IE）</li></ul><h4 id="移除多余的字体字形"><a href="#移除多余的字体字形" class="headerlink" title="移除多余的字体字形"></a>移除多余的字体字形</h4><p><a href="https://www.fontsquirrel.com/" target="_blank" rel="noopener">Font Squirrel</a>提供一个很棒的工具，可以帮助你将桌面版本的字体文件转换成网络版本。</p><h4 id="JavaScript字体加载器"><a href="#JavaScript字体加载器" class="headerlink" title="JavaScript字体加载器"></a>JavaScript字体加载器</h4><p><a href="https://github.com/typekit/webfontloader" target="_blank" rel="noopener">WebFont Loader</a>可以在字体下载过程中，用CSS和JavaScript钩子机制表明字体的状态。<br>它所追踪的状态有3种：加载中（loading/wf-loading）、活跃（active/wf-active）和非活跃（超时 inactive/wf-inactive）。相应的CSS类可以通过先隐藏标题，下载完成后再显示的方式来解决FOUT问题。</p><pre class=" language-css"><code class="language-css"><span class="token selector">h1 </span><span class="token punctuation">{</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wf-active</span> h1 </span><span class="token punctuation">{</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这些相同事件的JavaScript钩子也可以从配置对象的回调函数中获得。</p><pre class=" language-js"><code class="language-js">WebFontConfig <span class="token operator">=</span> <span class="token punctuation">{</span>  google<span class="token punctuation">:</span> <span class="token punctuation">{</span>    families<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tangerine'</span><span class="token punctuation">,</span> <span class="token string">'Cantarell'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// example</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  typekit<span class="token punctuation">:</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">'myKitId'</span>                         <span class="token comment" spellcheck="true">// example</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  loading<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  active<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  inactive<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="Boot-getFont介绍：一种快速、小巧的Web字体加载器"><a href="#Boot-getFont介绍：一种快速、小巧的Web字体加载器" class="headerlink" title="Boot.getFont介绍：一种快速、小巧的Web字体加载器"></a>Boot.getFont介绍：一种快速、小巧的Web字体加载器</h4><p><a href="https://raw.githubusercontent.com/artzstudio/Boot/master/src/standalone/boot.getfont.js" target="_blank" rel="noopener">boot.getfont.js 开发版本</a><br>你可以非常简单地改变文件结尾处的“Boot”字符串来更改其命名空间，例如：jQuery。<br>通过一个JavaScript函数就可以加载字体，并在字体完成渲染后，执行提供的回调方法。</p><pre class=" language-js"><code class="language-js">Boot<span class="token punctuation">.</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token string">'opensans'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// when font is active</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>通过加载一个配置对象，你可以很轻松地配置它来抓取基于你的目录结构的字体。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Global</span>Boot<span class="token punctuation">.</span>getFont<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/fonts/{f}/{f}-webfont'</span> <span class="token comment" spellcheck="true">// {f} is replaced with the font name</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Font-specific</span>Boot<span class="token punctuation">.</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'http://mycdn.com/fonts/{f}/{f}-wf'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'futura'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>CSS类：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.wf-opensans-loading</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wf-opensans-active</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wf-opensans-inactive</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="Gentlefonts，启动你的引擎"><a href="#Gentlefonts，启动你的引擎" class="headerlink" title="Gentlefonts，启动你的引擎"></a>Gentlefonts，启动你的引擎</h4><ul><li>B1      -&gt;  Boot.getFont</li><li>B2      -&gt;  Boot.getFont(CDN)</li><li>FS1     -&gt;  FontSquirrel Optimal</li><li>FS2     -&gt;  FontSquirrel Expert</li><li>FS3     -&gt;  FontSquirrel Expert(CDN)</li><li>GWF1    -&gt;  Google Web Fonts Standard</li><li>GWF2    -&gt;  Google Web Fonts JavaScript<br>(时间越少越好)</li></ul>      <div id="jp1q5dt8m1c" class="hexo-tag-easy-charts" style="width: 100%; height: 480px;"></div>      <script type="text/javascript">        var chart = echarts.init(document.getElementById('jp1q5dt8m1c'));        chart.setOption({"title":{"text":"字体实现基准测试"},"animation":true,"tooltip":{"trigger":"axis"},"xAxis":{"data":["GWF1","GWF2","FS1","Typekit","FS2","B1","FS3","B2","System"]},"yAxis":{},"series":[{"name":"IE 9","type":"bar","data":["896","1096","997","798","822","812","710","692","373"]},{"name":"IE 8","type":"bar","data":["850","1097","800","999","704","698","697","697","358"]},{"name":"IE 7","type":"bar","data":["870","1126","803","959","784","798","681","696","370"]},{"name":"Firefox","type":"bar","data":["1003","1254","933","795","802","693","667","652","506"]},{"name":"Chrome","type":"bar","data":["899","801","925","815","792","704","681","680","398"]}],"legend":{"data":["IE 9","IE 8","IE 7","Firefox","Chrome"]}});      </script>          <div id="zkf816tfit" class="hexo-tag-easy-charts" style="width: 100%; height: 480px;"></div>      <script type="text/javascript">        var chart = echarts.init(document.getElementById('zkf816tfit'));        chart.setOption({"title":{"text":"字体实现的最快速度"},"animation":true,"tooltip":{"trigger":"axis"},"xAxis":{"data":["GWF1","GWF2","FS1","Typekit","FS2","B1","FS3","B2","System"]},"yAxis":{},"series":[{"name":"Value","type":"bar","data":["850","801","800","795","704","693","667","652","358"]}]});      </script>    <p>资料：</p><ul><li><a href="https://www.filamentgroup.com/lab/font-loading.html" target="_blank" rel="noopener">How we use web fonts responsibly, or, avoiding a @font-face-palm 我们如何负责任地使用网络字体，或​​避免使用@ font-face-palm</a></li><li><a href="https://www.filamentgroup.com/lab/font-events.html" target="_blank" rel="noopener">How We Load Web Fonts Progressively 我们如何逐步加载Web字体</a></li><li><a href="https://filamentgroup.github.io/font-loading/data-uris-cookie.html" target="_blank" rel="noopener">cookie加载字体demo</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Web性能实践日志》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;localStorage-读取性能&quot;&gt;&lt;a href=&quot;#localStorage-读取性能&quot; class=&quot;headerlink&quot; title=&quot;localStorage 读取性能&quot;&gt;&lt;/a&gt;localStorage 读取性能&lt;/h3&gt;&lt;p&gt;localStorage技术应用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用localStorage来实时保存您正在输入的评论&lt;/li&gt;
&lt;li&gt;谷歌和Bing用localStorage存储JavaScript和CSS，来改善他们的移动网站的性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了保持跨浏览器会话，localStorage的数据被写入磁盘中。这意味着当你从localStorage中读取数据时，你实际上是从硬盘驱动器上读取这些字节。&lt;br&gt;读写硬盘的开销高昂，特别是相对于读写内存来说。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Web性能实践日志" scheme="http://zhanyunmian.coding.me/tags/Web%E6%80%A7%E8%83%BD%E5%AE%9E%E8%B7%B5%E6%97%A5%E5%BF%97/"/>
    
      <category term="性能" scheme="http://zhanyunmian.coding.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>A tale of two viewports 笔记</title>
    <link href="http://zhanyunmian.coding.me/2019/08/10/A-table-of-two-viewports/"/>
    <id>http://zhanyunmian.coding.me/2019/08/10/A-table-of-two-viewports/</id>
    <published>2019-08-10T13:13:33.000Z</published>
    <updated>2019-10-19T13:11:18.598Z</updated>
    
    <content type="html"><![CDATA[<ul><li>两个视口的故事一<a href="https://www.quirksmode.org/mobile/viewports.html" target="_blank" rel="noopener">A tale of two viewports - part one</a></li><li>两个视口的故事二<a href="https://www.quirksmode.org/mobile/viewports2.html" target="_blank" rel="noopener">A tale of two viewports - part two</a></li></ul><h2 id="Part-one"><a href="#Part-one" class="headerlink" title="Part one"></a>Part one</h2><p><strong>在这个小系列中，我将解释视口和各种重要元素的宽度如何工作，例如<code>&lt;html&gt;</code>元素，以及窗口和屏幕。</strong></p><p>此页面是关于桌面浏览器的，其唯一目的是为移动浏览器的类似讨论设置阶段。 大多数Web开发人员已经直观地理解了大多数桌面概念。 在移动设备上，我们会发现相同的概念，但更复杂。<br>因此，事先讨论每个人已经知道的术语将极大地帮助您理解移动浏览器。</p><a id="more"></a><h3 id="Concept-device-pixels-amp-CSS-pixels-概念-设备像素和CSS像素"><a href="#Concept-device-pixels-amp-CSS-pixels-概念-设备像素和CSS像素" class="headerlink" title="Concept: device pixels &amp; CSS pixels 概念: 设备像素和CSS像素"></a>Concept: device pixels &amp; CSS pixels 概念: 设备像素和CSS像素</h3><p>您需要了解的第一个概念是CSS像素，以及与设备像素的差异。</p><p>设备像素是我们认为“真实”的像素类型。这些像素为您正在处理的任何设备提供正式分辨率，并且（通常）可以从screen.width / height读出。</p><p>如果你给某个元素一个宽度：128px，你的显示器是1024px宽，并且你最大化你的浏览器屏幕，那么你的显示器宽度可以包容8个该元素（粗略地说，让我们暂时忽略这些棘手的部分）。</p><p>但是，如果用户缩放浏览器页面，则此计算将发生变化。如果用户放大到200％，即放大2倍，则宽度为128px的元素在其1024px宽的显示器上仅适合四次。</p><p>在现代浏览器中实现的缩放只不过是“拉伸”像素。也就是说，元素的宽度不会从128像素变为256像素;相反，实际像素的大小加倍。形式上，该元素仍然具有128个CSS像素的宽度，即使它恰好占用256个设备像素的空间。</p><p>换句话说，放大到200％会使一个CSS像素增长到一个设备像素大小的四倍。 （宽度的两倍，高度的两倍，总共产生四倍）。</p><p>一些图像将阐明这一概念。这是100％缩放级别的四个像素。没什么可看的; CSS像素与设备像素完全重叠。</p><p><img src="csspixels_100.gif" alt="CSS pixels * 1"></p><p>现在让我们缩小浏览器页面大小。 CSS像素开始缩小，这意味着一个设备像素现在与几个CSS像素重叠。</p><p><img src="csspixels_out.gif" alt="zoom out"></p><p>如果放大，则会发生相反的情况。 CSS像素开始增长，现在一个CSS像素与几个设备像素重叠。</p><p><img src="csspixels_in.gif" alt="zoom in"></p><p>这里的要点是你只对CSS像素感兴趣。 这些像素决定了样式表的呈现方式。</p><p>设备像素几乎完全没用。<br>用户将放大或缩小页面直到他可以舒适地阅读它。 但是，缩放级别对您无关紧要。 浏览器将自动确保您的CSS布局被拉伸或挤压。</p><h4 id="100-zoom-100-缩放"><a href="#100-zoom-100-缩放" class="headerlink" title="100% zoom 100%缩放"></a>100% zoom 100%缩放</h4><p>我假设缩放级别为100％开始了这个例子。 现在是时候更严格地定义：</p><p>在缩放级别100％时，一个CSS像素正好等于一个设备像素。</p><p>100％缩放的概念在接下来的解释中非常有用，但您不应该在日常工作中过度担心它。 在桌面上，您通常会以100％缩放测试您的网站，但即使用户放大或缩小CSS像素的魔力也会确保您的布局保持相同的比例。</p><h3 id="Screen-size-屏幕尺寸"><a href="#Screen-size-屏幕尺寸" class="headerlink" title="Screen size 屏幕尺寸"></a>Screen size 屏幕尺寸</h3><p>我们来看看一些实际测量。 我们将从screen.width和screen.height开始。 它们包含用户屏幕的总宽度和高度。 这些尺寸是以设备像素为单位测量的，因为它们永远不会改变：它们是显示器的一个功能，而不是浏览器的功能。</p><p><img src="desktop_screen.jpg" alt="Screen size"></p><p>有趣！ 但是我们如何处理这些信息呢？</p><p>基本上没什么。 用户的显示器大小对我们来说并不重要 - 除非您想测量它以用于Web统计数据库。</p><h3 id="Window-size-窗口尺寸"><a href="#Window-size-窗口尺寸" class="headerlink" title="Window size 窗口尺寸"></a>Window size 窗口尺寸</h3><p>反而，您想知道的是浏览器窗口的内部尺寸。 这可以告诉您用户当前有多少空间可用于CSS布局。 您可以在window.innerWidth和window.innerHeight中找到这些尺寸。</p><p><img src="desktop_inner.jpg" alt="Window size"></p><p>显然，窗口的内部宽度是以CSS像素为单位测量的。 您需要知道可以在浏览器窗口中挤出多少布局，并且随着用户放大，该数量会减少。因此，如果用户放大，则窗口中的可用空间会减少，而window.innerWidth / Height会反映出来减少。</p><p>（这里的例外是Opera，其中window.innerWidth / Height在用户放大时不会减小：它们是以设备像素为单位测量的。这在桌面上很烦人，但在移动设备上会很致命，我们稍后会看到。）</p><p><img src="desktop_inner_zoomed.jpg" alt="Window size"></p><p>请注意，测量的宽度和高度包括滚动条。 它们也被视为内部窗口的一部分。 （这主要是出于历史原因。）</p><h3 id="Scrolling-offset-滚动偏移"><a href="#Scrolling-offset-滚动偏移" class="headerlink" title="Scrolling offset 滚动偏移"></a>Scrolling offset 滚动偏移</h3><p>window.pageXOffset和window.pageYOffset，包含文档的水平和垂直滚动偏移。 因此，您可以了解用户滚动了多少。</p><p><img src="desktop_page.jpg" alt="Scrolling offset"></p><p>这些属性也以CSS像素为单位进行测量。 您想知道已经滚动了多少文档，无论它处于何种缩放状态。</p><p>理论上，如果用户向上滚动然后放大，window.pageX / YOffset将会改变。 但是，浏览器尝试通过在用户缩放时将相同元素保持在可见页面的顶部来保持网页的一致性。 这并不总是完美无缺，但这意味着在实践中window.pageX / YOffset并没有真正改变：滚出窗口的CSS像素数量保持（大致）相同。</p><p><img src="desktop_page_zoomed.jpg" alt="Scrolling offset"></p><h3 id="Concept-the-viewport-概念-视口"><a href="#Concept-the-viewport-概念-视口" class="headerlink" title="Concept: the viewport 概念: 视口"></a>Concept: the viewport 概念: 视口</h3><p>在继续使用更多JavaScript属性之前，我们必须引入另一个概念：视口。</p><p>视口的功能是约束<code>&lt;html&gt;</code>元素，它是站点中最上面的包含块。</p><p>这可能听起来有点模糊，所以这是一个实际的例子。假设您有液体布局，其中一个侧边栏的宽度为10％。现在，当您调整浏览器窗口大小时，侧边栏会整齐地增长和缩小。但究竟是如何运作的呢？</p><p>从技术上讲，会发生边栏获得其父级宽度的10％。假设是<code>&lt;body&gt;</code>（并且你没有给它宽度）。所以问题就变成了<code>&lt;body&gt;</code>的宽度。</p><p>通常，所有块级元素都占用其父级宽度的100％（有异常，但现在让我们忽略它们）。所以<code>&lt;body&gt;</code>和它的父<code>&lt;html&gt;</code>元素一样宽。</p><p><code>&lt;html&gt;</code>元素有多宽？为什么，它和浏览器窗口一样宽。这就是为什么宽度为10％的侧边栏将覆盖整个浏览器窗口的10％。所有Web开发人员都直观地了解并使用了这一事实。</p><p>你可能不知道的是它在理论上是如何运作的。理论上，<code>&lt;html&gt;</code>元素的宽度受视口宽度的限制。 <code>&lt;html&gt;</code>元素占用该视口宽度的100％。</p><p>反过来，视口完全等于浏览器窗口：它已被定义为这样。视口不是HTML构造，因此您无法通过CSS对其进行影响。它只有浏览器窗口的宽度和高度 - 在桌面上。<br>在移动设备上，它要复杂得多。</p><h3 id="Consequences-后果"><a href="#Consequences-后果" class="headerlink" title="Consequences 后果"></a>Consequences 后果</h3><p>这种状况有一些奇怪的后果。 你可以在这个网站上看到其中一个。 一直向上滚动到顶部，然后放大两到三步，以便该站点的内容溢出浏览器窗口。</p><p>现在滚动到右侧，您将看到站点顶部的蓝色栏不再正常排列。</p><p><img src="desktop_htmlbehaviour.jpg" alt="Consequences"></p><p>此行为是视口定义方式的结果。 我给了顶部的蓝色条宽度：100％。 100％的是什么？ <code>&lt;html&gt;</code>元素，与视口一样宽，与浏览器窗口一样宽。</p><p>重点是：虽然这在100％缩放时工作正常，但现在我们放大了视口已经变得小于我的网站的总宽度。 内容现在溢出<code>&lt;html&gt;</code>元素本身无关紧要，但该元素设置了<code>overflow: visible</code>，这意味着任何情况下都会显示溢出内容。</p><p>但蓝色的顶栏没有溢出。 我给它一个宽度：100％，毕竟，浏览器遵守视口的宽度。 他们并不关心那个宽度现在太窄了。</p><p><img src="desktop_100percent.jpg" alt="Consequences"></p><h4 id="document-width-文档流宽度"><a href="#document-width-文档流宽度" class="headerlink" title="document width? 文档流宽度"></a>document width? 文档流宽度</h4><p><em>（或者文档对象宽度？）</em><br>我真正需要知道的是页面的总内容有多宽，包括“突出”的位。据我所知，不可能找到该值（好吧，除非你计算在页面上的所有元素各自的宽度和边距 ，但这是容易出错的。</p><p>我开始相信我们需要一对JavaScript属性（宽和高），它给出了我所谓的“文档宽度”（显然是CSS像素）。</p><p><img src="desktop_documentwidth.jpg" alt="document width"></p><p>如果我们真的感觉很时髦，为什么不将这个值暴露给CSS呢？ 我希望能够制作宽度：我的蓝色条的100％取决于文档宽度，而不是<code>&lt;html&gt;</code>元素的宽度。 （但这肯定是棘手的，如果不可能实现，我也不会感到惊讶。）</p><p>浏览器厂商，您怎么看？</p><h3 id="Measuring-the-viewport-测量视口"><a href="#Measuring-the-viewport-测量视口" class="headerlink" title="Measuring the viewport 测量视口"></a>Measuring the viewport 测量视口</h3><p>您可能想知道视口的尺寸。 它们可以在document.documentElement.clientWidth和-Height中找到。</p><p><img src="desktop_client.jpg" alt="Measuring the viewport"></p><p>如果你知道你的DOM，你知道document.documentElement实际上是<code>&lt;html&gt;</code>元素：任何HTML文档的根元素。 但是，视口高一级，可以这么说; 它是包含<code>&lt;html&gt;</code>元素的元素。</p><p>在那种情况下，document.documentElement.clientWidth和-Height仍然给出视口的尺寸，而不是<code>&lt;html&gt;</code>元素的尺寸。 （这是一个特殊规则，仅适用于此对属性元素。在所有其他情况下，使用元素的实际宽度。）</p><p><img src="desktop_client_smallpage.jpg" alt="Measuring the viewport"></p><p>因此，无论<code>&lt;html&gt;</code>元素的尺寸如何，document.documentElement.clientWidth和-Height始终都会提供视口尺寸。</p><h4 id="Two-property-pairs-两个属性对"><a href="#Two-property-pairs-两个属性对" class="headerlink" title="Two property pairs 两个属性对"></a>Two property pairs 两个属性对</h4><p>但是不是window.innerWidth / Height给出的视口宽度的尺寸？ 嗯，是的，不。</p><p>两个属性对之间存在形式上的差异：document.documentElement.clientWidth和-Height不包括滚动条，而window.innerWidth / Height则包含滚动条。</p><p>我们有两个属性对的事实是浏览器大战的延续。 那时Netscape只支持window.innerWidth / Height和IE only document.documentElement.clientWidth和-Height。 从那以后所有其他浏览器开始支持clientWidth / Height，但IE没有选择window.innerWidth / Height。</p><p>有两个可用的属性对是桌面上的一个小麻烦 - 但事实证明，这对移动设备来说是一种祝福，我们将会看到。</p><h3 id="Measuring-the-lt-html-gt-element-测量html元素"><a href="#Measuring-the-lt-html-gt-element-测量html元素" class="headerlink" title="Measuring the &lt;html&gt; element 测量html元素"></a>Measuring the <code>&lt;html&gt;</code> element 测量html元素</h3><p>所以clientWidth / Height在所有情况下都给出了视口尺寸。<br>但是我们在哪里可以找到<code>&lt;html&gt;</code>元素本身的尺寸？ 它们存储在document.documentElement.offsetWidth和-Height中。</p><p><img src="desktop_offset.jpg" alt="Measuring the `&lt;html&gt;` element"></p><p>这些属性真正允许您作为块级元素访问<code>&lt;html&gt;</code>元素; 如果设置宽度，offsetWidth将反映它。</p><p><img src="desktop_offset_smallpage.jpg" alt="Measuring the `&lt;html&gt;` element"></p><h3 id="Event-coordinates-事件坐标"><a href="#Event-coordinates-事件坐标" class="headerlink" title="Event coordinates 事件坐标"></a>Event coordinates 事件坐标</h3><p>然后是事件坐标。 发生鼠标事件时，会暴露不少于五个属性对，以提供有关事件确切位置的信息。 对于我们的讨论，其中三个很重要：</p><table><thead><tr><th>属性对</th><th>作用</th></tr></thead><tbody><tr><td>pageX/Y</td><td>给出了CSS像素中相对于`<html>`元素的坐标</html></td></tr><tr><td>clientX/Y</td><td>给出CSS像素中相对于视口的坐标</td></tr><tr><td>screenX/Y</td><td>给出设备像素中相对于屏幕的坐标</td></tr></tbody></table><p><img src="desktop_pageXY.jpg" alt="Event coordinates"></p><p>您将在90％的时间内使用pageX/Y; 通常你想知道相对于文档的事件位置。<br>另外10％的时间你会使用clientX/Y. 您永远不需要知道相对于屏幕的事件坐标。</p><h3 id="Media-queries-媒体查询"><a href="#Media-queries-媒体查询" class="headerlink" title="Media queries 媒体查询"></a>Media queries 媒体查询</h3><p>最后，关于媒体查询的一些话。 这个想法非常简单：您可以定义特殊的CSS规则，仅当页面宽度大于，等于或小于特定大小时才执行。 例如：</p><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token class">.sidebar</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> all and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 宽度小于400px时指定的样式; */</span>  <span class="token selector">div<span class="token class">.sidebar</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现在侧边栏宽300px，除非宽度小于400px，在这种情况下侧边栏变宽100px。</p><p>问题当然是：我们在这里测量的宽度是多少？</p><p>有两个相关的媒体查询： width/height和device-width/device-height。</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>width/height</td><td>使用与documentElement .clientWidth / Height（换句话说，视口）相同的值。 它适用于CSS像素。</td></tr><tr><td>device-width/device-height</td><td>使用与screen.width/height相同的值（换句话说，屏幕）。 它适用于设备像素。</td></tr></tbody></table><p><img src="desktop_mediaqueries.jpg" alt="Media queries"></p><p>你应该用哪个？ 当然，这是一个明智的选择：width。 Web开发人员对设备宽度不感兴趣; 这是浏览器窗口的宽度。</p><p>所以在桌面上使用宽度并忘记设备宽度。 正如我们所看到的，移动设备的情况要严重得多。</p><h3 id="Conclusion-结论"><a href="#Conclusion-结论" class="headerlink" title="Conclusion 结论"></a>Conclusion 结论</h3><p>这就结束了我们对桌面浏览器行为的尝试。 本系列的第二部分将这些概念移植到移动设备，并突出了与桌面的一些重要差异。</p><h2 id="Part-two"><a href="#Part-two" class="headerlink" title="Part two"></a>Part two</h2><p>在这个小系列中，我将解释视口和各种重要元素的宽度如何工作，例如<code>&lt;html&gt;</code>元素，以及窗口和屏幕。</p><p>在这个页面里，我们将讨论移动浏览器。 如果您对移动设备完全陌生，我建议您先阅读有关桌面浏览器的第一部分。</p><h3 id="The-problem-of-mobile-browsers-移动浏览器的问题"><a href="#The-problem-of-mobile-browsers-移动浏览器的问题" class="headerlink" title="The problem of mobile browsers 移动浏览器的问题"></a>The problem of mobile browsers 移动浏览器的问题</h3><p>当我们将移​​动浏览器与桌面浏览器进行比较时，最明显的区别是屏幕尺寸。移动浏览器显示的网站，桌面优化显着少于桌面浏览器，或者通过缩小直到文本不可读的小，或者只能显示桌面网站的一小部分。</p><p>移动屏幕远小于桌面屏幕，考虑最大宽度为400px，有时候要少得多。 （有些手机报告的宽度较大，但它们在撒谎 - 或者至少给我们无用的信息。）</p><p>平板电脑设备之中，如iPad或传闻中的基于HP webOS的平板设备，将弥合台式机和移动设备之间的差距，但这不会改变根本问题。网站也必须在移动设备上运行，因此我们必须让它们在小屏幕上显示。</p><p>最重要的问题集中在CSS上，尤其是视口的尺寸。如果我们一对一地复制桌面模型，我们的CSS就会开始惨不忍睹。</p><p>让我们回到我们的侧边栏，宽度：10％。如果移动浏览器与桌面浏览器完全相同，那么它们最多只能生成40px宽的元素，而且这个元素太窄了。你的液体布局看起来会非常可怕。</p><p>解决问题的一种方法是为移动浏览器构建一个特殊网站。即使除了你是否应该这样做的基本问题之外，实际的问题是只有极少数的网站所有者被充分利用以满足移动设备的需求。</p><p>移动浏览器供应商希望为他们的客户提供最佳体验，现在这意味着“尽可能像桌面一样”。<br>因此需要一些技巧。</p><h3 id="The-two-viewports-两个视口"><a href="#The-two-viewports-两个视口" class="headerlink" title="The two viewports 两个视口"></a>The two viewports 两个视口</h3><p>因此视口太窄而无法作为CSS布局的基础。显而易见的解决方案是使视口更宽。但是，这需要将其拆分为两个：可视视口和布局视口(the visual viewport and the layout viewport)。</p><p>George Cummins在 <a href="https://stackoverflow.com/questions/6333927/difference-between-visual-viewport-and-layout-viewport" target="_blank" rel="noopener">Stack Overflow</a> 中解释了最基本的概念：</p><blockquote><p>想象一下，布局视口是一个不会改变大小或形状的大图像。现在，您可以使用较小的浏览器窗口来查看大图像。<br>小窗口被不透明材料包围，这些材料遮挡了除大部分图像之外的所有部分的视图。<br>您可以通过窗口看到的大图像部分是可视视口。<br>您可以在保持窗口的同时远离大图像（缩小）以一次查看整个图像，或者您可以靠近（放大）以仅查看一部分。<br>您也可以更改窗口的方向，但大图像（布局视口）的大小和形状永远不会更改。</p></blockquote><p>另见 <a href="https://stackoverflow.com/questions/7344886/visual-viewport-vs-layout-viewport-on-mobile-devices" target="_blank" rel="noopener">克里斯</a> 的这个解释。</p><blockquote><p>可视视口是当前在屏幕上显示的页面的一部分。<br>用户可以滚动以更改他看到的页面部分，或者缩放以更改可视视口的大小。</p></blockquote><p><img src="mobile_visualviewport.jpg" alt="The two viewports"></p><p>但是，CSS布局（尤其是百分比宽度）是相对于布局视口计算的，布局视口比视觉视口宽得多。</p><p>因此，<code>&lt;html&gt;</code>元素最初采用布局视口的宽度，并且您的CSS被解释为屏幕明显比手机屏幕宽。 这可确保您网站的布局与桌面浏览器上的布局相同。</p><p>布局视口有多宽？ 这与浏览器不同。 Safari iPhone使用980px，Opera 850px，Android WebKit 800px和IE 974px。</p><p>有些浏览器有特殊行为：</p><ul><li>Symbian WebKit尝试保持布局视口等于可视视口，是的，这意味着具有百分比宽度的元素可能表现得很奇怪。 但是，如果页面由于绝对宽度而不适合视觉视口，则浏览器会将布局视口拉伸到最大850px。</li><li>三星WebKit（在bada上）使布局视口与最宽的元素一样宽。</li><li>在BlackBerry上，布局视口等于100％缩放的可视视口。 这不会改变。</li></ul><h3 id="Zooming-缩放"><a href="#Zooming-缩放" class="headerlink" title="Zooming 缩放"></a>Zooming 缩放</h3><p>显然，两个视口都以CSS像素为单位进行测量。 但是，当视觉视口尺寸随着缩放而变化时（如果放大，屏幕上的CSS像素较少），布局视口尺寸保持不变。 （如果他们没有，您的页面将不断重排，因为重新计算百分比宽度。）</p><h3 id="Understanding-the-layout-viewport-了解布局视口"><a href="#Understanding-the-layout-viewport-了解布局视口" class="headerlink" title="Understanding the layout viewport 了解布局视口"></a>Understanding the layout viewport 了解布局视口</h3><p>为了理解布局视口的大小，我们必须看一下页面完全缩小时会发生什么。 许多移动浏览器最初以完全缩小模式显示任何页面。</p><p>重点是：浏览器选择了布局视口的尺寸，使其在完全缩小模式下完全覆盖屏幕（因此等于可视视口）。</p><p><img src="mobile_viewportzoomedout.jpg" alt="Understanding the layout viewport"></p><p>因此，布局视口的宽度和高度等于在最大缩小模式下可以在屏幕上显示的任何宽度和高度。<br>当用户放大这些尺寸时保持不变。</p><p><img src="mobile_layoutviewport.jpg" alt="Understanding the layout viewport"></p><p>布局视口宽度始终相同。 如果旋转手机，视觉视口会发生变化，但浏览器会通过稍微放大来适应此新方向，以使布局视口再次与视觉视口一样宽。</p><p><img src="mobile_viewportzoomedout_la.jpg" alt="Understanding the layout viewport"></p><p>这会对布局视口的高度产生影响，现在这个高度远远小于纵向模式。 但Web开发人员并不关心高度，只关心宽度。</p><p><img src="mobile_layoutviewport_la.jpg" alt="Understanding the layout viewport"></p><h3 id="Measuring-the-layout-viewport-测量布局视口"><a href="#Measuring-the-layout-viewport-测量布局视口" class="headerlink" title="Measuring the layout viewport 测量布局视口"></a>Measuring the layout viewport 测量布局视口</h3><p>我们现在有两个想要测量的视口。 因此，浏览器大战为我们提供了两个属性对，这是非常幸运的。</p><p>document.documentElement.clientWidth和-Height包含布局视口的尺寸。</p><p><img src="mobile_client.jpg" alt="Measuring the layout viewport"></p><p>方向对于高度很重要，但对于宽度则不重要。</p><p><img src="mobile_client_la.jpg" alt="Measuring the layout viewport"></p><h3 id="Measuring-the-visual-viewport-测量视觉视口"><a href="#Measuring-the-visual-viewport-测量视觉视口" class="headerlink" title="Measuring the visual viewport 测量视觉视口"></a>Measuring the visual viewport 测量视觉视口</h3><p>对于视觉视口，它由window.innerWidth/Height测量。 显然，当用户缩小或放大时，测量值会发生变化，因为更多或更少的CSS像素适合屏幕。</p><p><img src="mobile_inner.jpg" alt="Measuring the visual viewport"></p><p>不幸的是，这是一个不兼容的领域。许多浏览器仍然需要添加对视觉视口测量的支持。 尽管如此，没有浏览器将此测量值存储在任何其他属性对中，所以我猜window.innerWidth/Height是一个标准，尽管是一个兼容性差的。</p><h3 id="The-screen-屏幕"><a href="#The-screen-屏幕" class="headerlink" title="The screen 屏幕"></a>The screen 屏幕</h3><p>在桌面上，screen.width/height给出屏幕尺寸，以设备像素为单位。 与在桌面上一样，作为Web开发人员，您永远不需要这些信息。 您对屏幕的物理尺寸不感兴趣，但对当前适合的CSS像素数量感兴趣。</p><p><img src="mobile_screen.jpg" alt="The screen"></p><h4 id="The-zoom-level-缩放级别"><a href="#The-zoom-level-缩放级别" class="headerlink" title="The zoom level 缩放级别"></a>The zoom level 缩放级别</h4><p>无法直接读出缩放级别，但您可以通过window.innerWidth划分screen.width来获得缩放级别。 当然，只有在完全支持这两个属性时才有效。</p><p>幸运的是，缩放级别并不重要。 您需要知道的是屏幕上当前有多少CSS像素。 并且您可以从window.innerWidth获取该信息——如果它被正确支持。</p><h3 id="Scrolling-offset-滚动偏移-1"><a href="#Scrolling-offset-滚动偏移-1" class="headerlink" title="Scrolling offset 滚动偏移-"></a>Scrolling offset 滚动偏移-</h3><p>您还需要知道的是视觉视口相对于布局视口的当前位置。 这是滚动偏移，就像在桌面上一样，它存储在window.pageX/YOffset中。</p><p><img src="mobile_page.jpg" alt="Scrolling offset"></p><h3 id="lt-html-gt-element-html元素"><a href="#lt-html-gt-element-html元素" class="headerlink" title="&lt;html&gt; element html元素"></a><code>&lt;html&gt;</code> element html元素</h3><p>与在桌面上一样，document.documentElement.offsetWidth/Height以CSS像素为单位给出<code>&lt;html&gt;</code>元素的总大小。</p><h3 id="Media-queries-媒体查询-1"><a href="#Media-queries-媒体查询-1" class="headerlink" title="Media queries 媒体查询-"></a>Media queries 媒体查询-</h3><p>媒体查询与桌面上的查询工作方式相同。 width/height使用布局视口作为参考，以CSS像素为单位测量，device-width/height使用设备屏幕，以设备像素为单位进行测量。</p><p>换句话说，width/height反映了document.documentElement.clientWidth/Height，而device-width/height反映screen.width/height的值。 （他们实际上在所有浏览器中都这样做，即使镜像值不正确。）</p><p><img src="mobile_mediaqueries.jpg" alt="Media queries"></p><p>现在哪个测量对我们的Web开发人员更有用？ 重点是，我不知道。</p><p>我开始认为device-width是最重要的一个，因为它为我们提供了一些我们可以使用的设备信息。 例如，您可以改变布局的宽度以适应设备的宽度。 但是，您也可以使用<code>&lt;meta viewport&gt;</code>。 使用device-width媒体查询并不是绝对必要的。</p><p>那么width是更重要的媒体查询吗？ 也许。 它提供了一些线索，比如浏览器认为该设备上的网站宽度是多少。 但这是相当模糊的，width媒体查询并没有真正提供任何其他信息。</p><p>所以我还没有决定。 目前我认为媒体查询对于确定您是在台式机，平板电脑还是移动设备上非常重要，但对于区分各种平板电脑或移动设备并不是那么有用。</p><p>或者其他的东西。</p><h3 id="Event-coordinates-事件坐标-1"><a href="#Event-coordinates-事件坐标-1" class="headerlink" title="Event coordinates 事件坐标-"></a>Event coordinates 事件坐标-</h3><p>事件坐标或多或少在桌面上工作。 不幸的是，在12个经过测试的浏览器中，只有两个，Symbian WebKit和Iris，完全正确。 所有其他浏览器都有或多或少的严重问题。</p><p>pageX/Y仍然是相对于CSS像素中的页面，这是三个属性对中最有用的，就像它在桌面上一样。</p><p><img src="mobile_pageXY.jpg" alt="Event coordinates"></p><p>clientX/Y相对于CSS像素中的可视视口。 这是有用的，虽然我不完全确定它有什么可用之处。</p><p>screenX/Y是相对于设备像素中的屏幕。 当然，这与clientX/Y使用的引用相同，并且设备像素无用。 所以我们不需要担心screenX/Y。 它与桌面上的一样无用。</p><p><img src="mobile_clientXY.jpg" alt="Event coordinates"></p><h3 id="Meta-viewport-元视口"><a href="#Meta-viewport-元视口" class="headerlink" title="Meta viewport 元视口"></a>Meta viewport 元视口</h3><p>最后，让我们讨论<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=320&quot;&gt;</code>。 最初是Apple扩展程序，但同时被更多浏览器复制。 它旨在调整布局视口的大小。 为了理解为什么这是必要的，让我们退后一步。</p><p>假设你构建一个简单的页面并且你的元素没有设置宽度。 现在它们伸展到占据布局视口宽度的100％。 大多数浏览器缩小以在屏幕上显示整个布局视口，产生如下效果：</p><p><img src="mq_none.jpg" alt="Meta viewport"></p><p>所有用户都会立即放大，这是有效的，但大多数浏览器保持元素的宽度不变，这使得文本难以阅读。</p><p><img src="mq_none_zoomed.jpg" alt="Meta viewport"></p><p>（这里的重要例外是Android WebKit，它实际上减少了包含文本的元素的大小，使它们适合屏幕。这绝对是非常棒的，我觉得所有其他浏览器都应该复制这种行为。我将在以后完整记录它。）</p><p>现在您可以尝试设置html {width：320px}。 现在<code>&lt;html&gt;</code>元素缩小了，所有其他元素都缩小了，现在占用了320px的100％。 这在用户放大时起作用，但最初不是在用户遇到大部分不包含任何内容的缩小页面时。</p><p><img src="mq_html300.jpg" alt="Meta viewport"></p><p>为了解决这个问题，Apple发明了meta视口标签。 设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=320&quot;&gt;</code>时，将布局视口的宽度设置为320px。 现在页面的初始状态也是正确的。</p><p><img src="mq_yes.jpg" alt="Meta viewport"></p><p>您可以将布局视口的宽度设置为所需的任何尺寸，包括设备宽度。 最后一个将screen.width（在设备像素中）作为其引用，并相应地调整布局视口的大小。</p><p>不过，这里有一个问题。 有时正式的screen.width没有多大意义，因为像素数太高了。 例如，Nexus One的正式宽度为480像素，但Google工程师已经决定在使用设备宽度时给布局视口宽度为480像素太多了。 它们将它缩小到2 / 3rds，因此设备宽度可以为您提供320px的宽度，就像在iPhone上一样。</p><p>如果传言新iPhone将会有更大的像素数（不一定等于更大的屏幕！），如果Apple复制这种行为，我也不会感到惊讶。 也许到最后，设备宽度仅意味着320px。</p><h3 id="Related-research-相关的研究"><a href="#Related-research-相关的研究" class="headerlink" title="Related research 相关的研究"></a>Related research 相关的研究</h3><p>必须进一步研究几个相关主题：</p><ul><li>position: fixed。 如我们所知，固定元素相对于视口定位。 但相对于哪个视口？我同时做了这项<a href="https://www.quirksmode.org/blog/archives/2010/12/the_fifth_posit.html" target="_blank" rel="noopener">研究</a>。</li><li>其他媒体查询：dpi，方向，宽高比( dpi, orientation, aspect-ratio )。 特别是dpi是一个灾难区域，不仅因为所有浏览器报告96dpi，这通常是错误的，而且因为我还不完全确定dpi是Web开发人员最感兴趣的值。</li><li>当元素比布局视口/HTML element更宽时会发生什么？ 假设我将一个宽度为1500px的元素插入到我的一个测试页面中？ 元素将突出HTML元素（overflow: visible），但这意味着实际视口可以变得比布局视口更宽。 此外，旧的Android（Nexus One）在发生这种情况时放大了HTML元素。 这是一个好主意吗？</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;两个视口的故事一&lt;a href=&quot;https://www.quirksmode.org/mobile/viewports.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A tale of two viewports - part one&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;两个视口的故事二&lt;a href=&quot;https://www.quirksmode.org/mobile/viewports2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A tale of two viewports - part two&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Part-one&quot;&gt;&lt;a href=&quot;#Part-one&quot; class=&quot;headerlink&quot; title=&quot;Part one&quot;&gt;&lt;/a&gt;Part one&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在这个小系列中，我将解释视口和各种重要元素的宽度如何工作，例如&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;元素，以及窗口和屏幕。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此页面是关于桌面浏览器的，其唯一目的是为移动浏览器的类似讨论设置阶段。 大多数Web开发人员已经直观地理解了大多数桌面概念。 在移动设备上，我们会发现相同的概念，但更复杂。&lt;br&gt;因此，事先讨论每个人已经知道的术语将极大地帮助您理解移动浏览器。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="viewports" scheme="http://zhanyunmian.coding.me/tags/viewports/"/>
    
  </entry>
  
  <entry>
    <title>NODE安装笔记</title>
    <link href="http://zhanyunmian.coding.me/2019/08/10/NODE%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
    <id>http://zhanyunmian.coding.me/2019/08/10/NODE安装笔记/</id>
    <published>2019-08-10T08:06:46.000Z</published>
    <updated>2019-10-19T15:19:44.082Z</updated>
    
    <content type="html"><![CDATA[<h3 id="卸载node和npm"><a href="#卸载node和npm" class="headerlink" title="卸载node和npm"></a>卸载node和npm</h3><p>在安装nvm前要先卸载已经安装的node和npm。</p><p>命令行卸载的方法没看懂。可以找到自带的卸载程序卸载node。</p><a id="more"></a><h3 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h3><p>1.<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">NVM下载</a><br>2.下载完成后，将内容解压到C:\dev\nvm （需为全英文路径）<br>3.新建settings.txt文件：</p><pre class=" language-js"><code class="language-js">root<span class="token punctuation">:</span> C<span class="token punctuation">:</span>\dev\nvmpath<span class="token punctuation">:</span> C<span class="token punctuation">:</span>\dev\nodejsarch<span class="token punctuation">:</span> <span class="token number">64</span>proxy<span class="token punctuation">:</span> nonenode_mirror<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token regex">/node/</span>npm_mirror<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token regex">/npm/</span></code></pre><p>4.配置环境变量</p><ul><li>window + r 打开运行面板，然后输入 : sysdm.cpl，打开系统属性面板</li><li>在系统属性面板中切换到高级面板，点击下方的环境变量按钮，打开环境变量面板</li><li>新建系统变量如下：</li></ul><pre class=" language-js"><code class="language-js">NVM_HOME<span class="token punctuation">:</span> C<span class="token punctuation">:</span>\dev\nvmNVM_SYMLINK<span class="token punctuation">:</span> C<span class="token punctuation">:</span>\dev\nodejs</code></pre><ul><li>在系统变量PATH中新增 <code>%NVM_HOME%;%NVM_SYMLINK%;</code></li></ul><p>5.打开cmd，检查是否配置成功</p><pre class=" language-powershell"><code class="language-powershell"><span class="token function">set</span> NVM_HOME<span class="token function">set</span> NVM_SYMLINKnvm <span class="token operator">-</span>v</code></pre><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>命令：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 查看所有版本</span>nvm <span class="token function">ls</span><span class="token comment" spellcheck="true"># 查看可安装版本</span>nvm <span class="token function">ls</span><span class="token operator">-</span>remote<span class="token comment" spellcheck="true"># 安装最新版本</span>nvm install latest<span class="token comment" spellcheck="true"># 安装随意版本</span>nvm install 4<span class="token punctuation">.</span>6<span class="token punctuation">.</span>0<span class="token comment" spellcheck="true"># 切换node版本</span>nvm use 4<span class="token punctuation">.</span>6<span class="token punctuation">.</span>0<span class="token comment" spellcheck="true"># 安装稳定版本</span>nvm install stable<span class="token comment" spellcheck="true"># 查看当前版本</span>nvm current</code></pre><h3 id="配置node全局模块路径"><a href="#配置node全局模块路径" class="headerlink" title="配置node全局模块路径"></a>配置node全局模块路径</h3><ul><li>方法一：<br>设置到自己想要放的位置：</li></ul><p>打开：nodejs安装目录/node_modules/npm/.npmrc这个文件，修改里面的路径</p><pre class=" language-powershell"><code class="language-powershell">prefix = E:\nodejs\node_global_modules</code></pre><ul><li>方法二：</li></ul><p>进入cmd，输入如下代码：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 查看npm配置</span>npm config <span class="token function">ls</span>  <span class="token comment" spellcheck="true"># 配置prefix修改node的全局模块安装路径</span>npm config <span class="token function">set</span> prefix E:\nodejs\node_global_modules</code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/qwdafedv/article/details/55802747" target="_blank" rel="noopener">NVM，Windows下环境配置</a><br><a href="https://www.jianshu.com/p/28bca6529150" target="_blank" rel="noopener">在windows下用nvm 安装node</a><br><a href="https://www.jianshu.com/p/e21e3783304f" target="_blank" rel="noopener">nvm 使用攻略</a><br><a href="https://www.cnblogs.com/kongxianghai/p/5660101.html" target="_blank" rel="noopener">使用nvm利器，管理node版本</a><br><a href="https://www.cnblogs.com/niuxiaoling/p/7993032.html" target="_blank" rel="noopener">nodejs全局安装路径的位置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;卸载node和npm&quot;&gt;&lt;a href=&quot;#卸载node和npm&quot; class=&quot;headerlink&quot; title=&quot;卸载node和npm&quot;&gt;&lt;/a&gt;卸载node和npm&lt;/h3&gt;&lt;p&gt;在安装nvm前要先卸载已经安装的node和npm。&lt;/p&gt;
&lt;p&gt;命令行卸载的方法没看懂。可以找到自带的卸载程序卸载node。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="node" scheme="http://zhanyunmian.coding.me/tags/node/"/>
    
      <category term="nvm" scheme="http://zhanyunmian.coding.me/tags/nvm/"/>
    
      <category term="global_modules" scheme="http://zhanyunmian.coding.me/tags/global-modules/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://zhanyunmian.coding.me/2019/08/10/Git/"/>
    <id>http://zhanyunmian.coding.me/2019/08/10/Git/</id>
    <published>2019-08-10T07:55:58.000Z</published>
    <updated>2019-10-19T15:20:56.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git-Error"><a href="#Git-Error" class="headerlink" title="Git Error"></a>Git Error</h3><h4 id="failed-to-push-some-refs-to"><a href="#failed-to-push-some-refs-to" class="headerlink" title="failed to push some refs to"></a><code>failed to push some refs to</code></h4><pre class=" language-powershell"><code class="language-powershell">git pull <span class="token operator">--</span>rebase origin mastergit push origin master</code></pre><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Git-Error&quot;&gt;&lt;a href=&quot;#Git-Error&quot; class=&quot;headerlink&quot; title=&quot;Git Error&quot;&gt;&lt;/a&gt;Git Error&lt;/h3&gt;&lt;h4 id=&quot;failed-to-push-some-refs-to&quot;&gt;&lt;a href=&quot;#failed-to-push-some-refs-to&quot; class=&quot;headerlink&quot; title=&quot;failed to push some refs to&quot;&gt;&lt;/a&gt;&lt;code&gt;failed to push some refs to&lt;/code&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;git pull --rebase origin master
git push origin master&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
    
      <category term="Git" scheme="http://zhanyunmian.coding.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Vue入门笔记七(生产环境构建)</title>
    <link href="http://zhanyunmian.coding.me/2019/08/07/Vue%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E4%B8%83-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/"/>
    <id>http://zhanyunmian.coding.me/2019/08/07/Vue入门笔记七-生产环境构建/</id>
    <published>2019-08-07T05:37:51.000Z</published>
    <updated>2019-10-19T15:11:34.971Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《Vue.js项目实战》</p></blockquote><h3 id="将样式提取到CSS文件"><a href="#将样式提取到CSS文件" class="headerlink" title="将样式提取到CSS文件"></a>将样式提取到CSS文件</h3><p>安装包：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D extract<span class="token operator">-</span>text<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin</code></pre><a id="more"></a><p>在webpack.config.js导入并配置：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'common.[chunkhash].css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="新的npm脚本"><a href="#新的npm脚本" class="headerlink" title="新的npm脚本"></a>新的npm脚本</h3><p>1.安装包：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D rimraf</code></pre><p>2.为客户端bundle和服务器bundle各添加一个build脚本：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token string">"build:client"</span><span class="token punctuation">:</span> <span class="token string">"cross-env NODE_ENV=production webpack --progress --hide-modules --config webpack/client.js"</span><span class="token punctuation">,</span>  <span class="token string">"build:server"</span><span class="token punctuation">:</span> <span class="token string">"cross-env NODE_ENV=production webpack --progress --hide-modules --config webpack/server.js"</span><span class="token punctuation">}</span></code></pre><p>3.新建一个build脚本，用来清空dist文件夹并运行build:client和build:server这两个脚本：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token string">"build"</span>: <span class="token string">"rimraf dist &amp;&amp; npm run build:client &amp;&amp; npm run build:server"</span></code></pre><p>4.添加最后一个名为start的脚本，它会以生产模式运行express服务器：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token string">"start"</span>: <span class="token string">"cross-env NODE_ENV=production node server"</span></code></pre><p>5.运行构建：</p><pre class=" language-powershell"><code class="language-powershell">npm run build</code></pre><p>6.启动express服务器：</p><pre class=" language-powershell"><code class="language-powershell">npm <span class="token function">start</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Vue.js项目实战》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;将样式提取到CSS文件&quot;&gt;&lt;a href=&quot;#将样式提取到CSS文件&quot; class=&quot;headerlink&quot; title=&quot;将样式提取到CSS文件&quot;&gt;&lt;/a&gt;将样式提取到CSS文件&lt;/h3&gt;&lt;p&gt;安装包：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;npm i -D extract-text-webpack-plugin&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://zhanyunmian.coding.me/tags/Vue/"/>
    
      <category term="extract-text-webpack-plugin" scheme="http://zhanyunmian.coding.me/tags/extract-text-webpack-plugin/"/>
    
  </entry>
  
  <entry>
    <title>Vue入门笔记六(全局组件 过滤器 插件 变量)</title>
    <link href="http://zhanyunmian.coding.me/2019/08/07/Vue%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E5%85%AD-%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6-%E8%BF%87%E6%BB%A4%E5%99%A8-%E6%8F%92%E4%BB%B6/"/>
    <id>http://zhanyunmian.coding.me/2019/08/07/Vue入门笔记六-全局组件-过滤器-插件/</id>
    <published>2019-08-07T05:31:05.000Z</published>
    <updated>2019-10-19T15:11:34.972Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《Vue.js项目实战》</p></blockquote><h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>1.在components文件夹创建Loading.vue：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><a id="more"></a><p>2.在main.js旁边创建一个global-components.js，然后使用<code>Vue.component()</code>方法全局地注册Loading组件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> Loading <span class="token keyword">from</span> <span class="token string">"./components/Loading"</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"Loading"</span><span class="token punctuation">,</span> Loading<span class="token punctuation">)</span></code></pre><p>3.然后，在main.js中导入global-components.js：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'./global-components'</span></code></pre><p>现在可以全局使用<code>&lt;Loading /&gt;</code>了！</p><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><p>1.以momentjs为例，首先安装moment：</p><pre class=" language-powershell"><code class="language-powershell">npm install <span class="token operator">-</span>S moment</code></pre><p>2.在main.js文件旁边创建一个新的filters.js，它包含date过滤器：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">"moment"</span><span class="token keyword">export</span> <span class="token keyword">function</span> date <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">moment</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>3.在main.js中导入filters.js并用一个循环注册它们：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> filters <span class="token keyword">from</span> <span class="token string">'./filters'</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> filters<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> filters<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>现在完成注册全局过滤器了！</p><ul><li>在组件中使用：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Created on <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>{{ ticket.date | date }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="全局插件"><a href="#全局插件" class="headerlink" title="全局插件"></a>全局插件</h3><p>用自己的插件扩展Vue：</p><h4 id="创建一个插件"><a href="#创建一个插件" class="headerlink" title="创建一个插件"></a>创建一个插件</h4><p>（1）在src文件夹中创建一个plugins文件夹<br>（2）在plugins文件夹中创建一个fetch.js<br>（3）让我们通过导出一个带有install对象的方法创建一个插件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  install <span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Installed!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（4）在main.js中导入这个插件，然后像我们为vue-router所做的那样调用Vue.use()方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> VueFetch <span class="token keyword">from</span> <span class="token string">'./plugins/fetch'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueFetch<span class="token punctuation">)</span></code></pre><h4 id="插件选项"><a href="#插件选项" class="headerlink" title="插件选项"></a>插件选项</h4><p>我们可以使用options参数配置插件。<br>（1）编辑install方法，添加options参数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  install <span class="token punctuation">(</span>Vue<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Installed!'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（2）添加一个baseURL属性到配置中：</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueFetch<span class="token punctuation">,</span> <span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> <span class="token string">'http://localhost:3000/'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>（3）将baseURL存储到一个变量中，稍后使用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> baseURL<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  install <span class="token punctuation">(</span>Vue<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Installed!'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>    baseURL <span class="token operator">=</span> options<span class="token punctuation">.</span>baseURL  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="fetch方法"><a href="#fetch方法" class="headerlink" title="$fetch方法"></a>$fetch方法</h4><p>（1）在fetch.js中使用fetch方法实现$fetch方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> $fetch <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseURL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> error  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（2）添加到Vue的原型，使它在所有组件中都可用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  install <span class="token punctuation">(</span>Vue<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Installed!'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>    baseURL <span class="token operator">=</span> options<span class="token punctuation">.</span>baseURL    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$fetch <span class="token operator">=</span> $fetch  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（3）然后在组件中使用$fetch方法，比如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>question <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">'question'</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>error <span class="token operator">=</span> e<span class="token punctuation">}</span></code></pre><h5 id="改进fetch插件"><a href="#改进fetch插件" class="headerlink" title="改进fetch插件"></a>改进fetch插件</h5><p>目前，我们的$fetch方法只能对服务器发出GET请求。</p><p>（1）在plugins/fetch.js文件中添加options参数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">$fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>options参数是fetch方法的可选参数，允许我们更改不同的参数，例如使用的HTTP方法、请求主体等。</p><p>（2）在$fetch方法头部设置option参数的默认值：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> finalOptions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>  <span class="token comment" spellcheck="true">// 始终在请求主体中发送JSON</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  credentials<span class="token punctuation">:</span> <span class="token string">'include'</span>                <span class="token comment" spellcheck="true">// 包含用户登录所需的授权令牌</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span></code></pre><p>（3）接下来，将新选项添加到浏览器fetch方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseURL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> finalOptions<span class="token punctuation">)</span></code></pre><p>（4）另外，服务器总是将错误作为文本发送，所以可以捕获它们并显示给用户：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> data<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>  error<span class="token punctuation">.</span>response <span class="token operator">=</span> response  <span class="token keyword">throw</span> error<span class="token punctuation">}</span></code></pre><ul><li>在组件中使用：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> signup <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">'signup'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    body<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      username<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>      email<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">'login'</span><span class="token punctuation">}</span></code></pre><p>（5）会话过期</p><p>服务器始终返回403错误。</p><p>1.在修改请求方法（<code>/plugin/fetch.js</code>）前，需要导入state和路由器：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">"../state"</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"../router"</span></code></pre><p>2.在<code>fetch.js</code>响应处理中添加一个条件分支：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果会话不在有效</span>  <span class="token comment" spellcheck="true">// 我们登出</span>  state<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment" spellcheck="true">// 如果这个路由是私有的</span>  <span class="token comment" spellcheck="true">// 我们跳转到登录页面</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>r <span class="token operator">=</span><span class="token operator">></span> r<span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token keyword">private</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span>      wantedRoute<span class="token punctuation">:</span> router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>fullPath    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>现在这个插件完成了！</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">"../state"</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"../router"</span><span class="token keyword">let</span> baseUrl<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> $fetch <span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> finalOptions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    credentials<span class="token punctuation">:</span> <span class="token string">'include'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> finalOptions<span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果会话不在有效</span>    <span class="token comment" spellcheck="true">// 我们登出</span>    state<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token comment" spellcheck="true">// 如果这个路由是私有的</span>    <span class="token comment" spellcheck="true">// 我们跳转到登录页面</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>r <span class="token operator">=</span><span class="token operator">></span> r<span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token keyword">private</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        wantedRoute<span class="token punctuation">:</span> router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>fullPath      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    error<span class="token punctuation">.</span>response <span class="token operator">=</span> response    <span class="token keyword">throw</span> error  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  install <span class="token punctuation">(</span>Vue<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    baseUrl <span class="token operator">=</span> options<span class="token punctuation">.</span>baseUrl    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$fetch <span class="token operator">=</span> $fetch  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="fetch补充"><a href="#fetch补充" class="headerlink" title="fetch补充"></a>fetch补充</h4><p>兼容性：</p><p class="ciu_embed" data-feature="fetch" data-periods="[future_1,current,past_1,past_2,past_3]"><a href="http://caniuse.com/#feat=fetch" target="_blank" rel="noopener">Can I Use fetch?</a> Data on support for the fetch feature across the major browsers from caniuse.com.</p><script async src="//cdn.jsdelivr.net/caniuse-embed/1.1.0/caniuse-embed.min.js"></script><h3 id="全局变量-对象"><a href="#全局变量-对象" class="headerlink" title="全局变量/对象"></a>全局变量/对象</h3><h4 id="将用户存储在一个集中式state里"><a href="#将用户存储在一个集中式state里" class="headerlink" title="将用户存储在一个集中式state里"></a>将用户存储在一个集中式state里</h4><p>（1）在main.js旁边创建state.js，用于导出state对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  user<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></code></pre><p>（2）在main.js导入state：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">"./state"</span></code></pre><p>（3）然后，将其用作根实例的数据，以便使其成为响应式的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> state<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>AppLayout<span class="token punctuation">)</span><span class="token punctuation">,</span>  router<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="state原型对象"><a href="#state原型对象" class="headerlink" title="$state原型对象"></a>$state原型对象</h4><p>（1）在plugins文件夹中，创建一个导出插件state.js：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  install <span class="token punctuation">(</span>Vue<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'$state'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（2）在main.js中导入插件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> VueState <span class="token keyword">from</span> <span class="token string">'./plugins/state'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueState<span class="token punctuation">,</span> state<span class="token punctuation">)</span></code></pre><p>现在可以在组件中使用$state来访问全局状态了！</p><ul><li>实例：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$state.user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$state<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Vue.js项目实战》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;全局组件&quot;&gt;&lt;a href=&quot;#全局组件&quot; class=&quot;headerlink&quot; title=&quot;全局组件&quot;&gt;&lt;/a&gt;全局组件&lt;/h3&gt;&lt;p&gt;1.在components文件夹创建Loading.vue：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;loading&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://zhanyunmian.coding.me/tags/Vue/"/>
    
      <category term="components" scheme="http://zhanyunmian.coding.me/tags/components/"/>
    
      <category term="filters" scheme="http://zhanyunmian.coding.me/tags/filters/"/>
    
      <category term="plugins" scheme="http://zhanyunmian.coding.me/tags/plugins/"/>
    
      <category term="vars" scheme="http://zhanyunmian.coding.me/tags/vars/"/>
    
  </entry>
  
  <entry>
    <title>Vue入门笔记五(常用插件)</title>
    <link href="http://zhanyunmian.coding.me/2019/08/07/Vue%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E4%BA%94-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>http://zhanyunmian.coding.me/2019/08/07/Vue入门笔记五-常用插件/</id>
    <published>2019-08-07T05:21:12.000Z</published>
    <updated>2019-10-19T15:11:34.972Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《Vue.js项目实战》</p></blockquote><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>1.安装包：</p><pre class=" language-powershell"><code class="language-powershell">npm install axios <span class="token operator">-</span>S</code></pre><p>2.在src/utils文件夹中创建http.js：</p><a id="more"></a><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">const</span> http <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> <span class="token string">'http://localhost:3000/'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">function</span> install <span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http <span class="token operator">=</span> http<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> http</code></pre><ul><li>在src/plugins.js中导入和注册http：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Http <span class="token keyword">from</span> <span class="token string">'./utils/http'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Http<span class="token punctuation">)</span></code></pre><p>3.在vuexStore中使用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">'../utils/http'</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`items/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`comments?itemId=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'comments'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span></code></pre><p>在组件中使用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'comments'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span></code></pre><h3 id="json-server-生成快速开发API"><a href="#json-server-生成快速开发API" class="headerlink" title="json-server 生成快速开发API"></a>json-server 生成快速开发API</h3><p>创建本地API。</p><p>1.安装包</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D json<span class="token operator">-</span>server</code></pre><p>2.创建db.json：<br>示例：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Blue Socks"</span><span class="token punctuation">,</span>      <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">2.99</span><span class="token punctuation">,</span>      <span class="token property">"originalPrice"</span><span class="token operator">:</span> <span class="token number">3.99</span><span class="token punctuation">,</span>      <span class="token property">"rating"</span><span class="token operator">:</span> <span class="token number">4.3</span><span class="token punctuation">,</span>      <span class="token property">"img"</span><span class="token operator">:</span> <span class="token string">"http://lorempixel.com/400/400/abstract/1/"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Green Socks"</span><span class="token punctuation">,</span>      <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3.99</span><span class="token punctuation">,</span>      <span class="token property">"rating"</span><span class="token operator">:</span> <span class="token number">3.9</span><span class="token punctuation">,</span>      <span class="token property">"img"</span><span class="token operator">:</span> <span class="token string">"http://lorempixel.com/400/400/abstract/2/"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Red Socks"</span><span class="token punctuation">,</span>      <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">3.99</span><span class="token punctuation">,</span>      <span class="token property">"rating"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"img"</span><span class="token operator">:</span> <span class="token string">"http://lorempixel.com/400/400/abstract/3/"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"This is awesome!"</span><span class="token punctuation">,</span>      <span class="token property">"itemId"</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>3.在package.json添加一个脚本以启动JSON服务器：</p><pre class=" language-js"><code class="language-js"><span class="token string">"db"</span><span class="token punctuation">:</span> <span class="token string">"json-server --watch db.json"</span></code></pre><p>4.在终端打开：</p><pre class=" language-powershell"><code class="language-powershell">npm run db</code></pre><p>默认监听3000这个端口，在浏览器中打开REST地址<code>http://localhost:3000/items</code>就可以访问了。</p><h3 id="autoprefixer-添加前缀"><a href="#autoprefixer-添加前缀" class="headerlink" title="autoprefixer 添加前缀"></a>autoprefixer 添加前缀</h3><p>1.安装包：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D autoprefixer</code></pre><p>2.vue-loader已经包含PostCSS，则无需安装PostCSS。为了激活PostCSS，需要在项目根目录中添加一个postcss.config.js的配置文件：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>这样，autoprefixer就会处理我们的代码了！</p><h3 id="ESLint-提升代码质量和风格"><a href="#ESLint-提升代码质量和风格" class="headerlink" title="ESLint 提升代码质量和风格"></a>ESLint 提升代码质量和风格</h3><p>ESLint提供了一系列可以开启和关闭的lint规则，用于检查代码质量。还可以通过添加插件来添加更多规则，有些包则定义了一些预设规则。</p><p>1.我们将使用StandardJS预设规则以及eslint-plugin-vue包，添加了更多队则，有助于遵循Vue官方风格指南：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D eslint eslint<span class="token operator">-</span>config<span class="token operator">-</span>standard eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>vue@beta</code></pre><p>2.安装eslint-config-standard的4个平级依赖：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>import eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>node eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>promise eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>standard</code></pre><p>3.为了使ESLint解析文件时支持使用Babel的JavaScript代码，需要安装一个额外的包：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D babel<span class="token operator">-</span>eslint</code></pre><h4 id="配置ESLint"><a href="#配置ESLint" class="headerlink" title="配置ESLint"></a>配置ESLint</h4><p>在项目的根目录中创建一个.eslintrc.js文件并写入以下配置：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 仅使用本配置</span>  root<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 文件解析器</span>  parser<span class="token punctuation">:</span> <span class="token string">'vue-eslint-parser'</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对JavaScript使用babel-eslint</span>    <span class="token string">'parser'</span><span class="token punctuation">:</span> <span class="token string">'babel-eslint'</span><span class="token punctuation">,</span>    <span class="token string">'ecmaVersion'</span><span class="token punctuation">:</span> <span class="token number">2017</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 使用import/export语法</span>    <span class="token string">'sourceType'</span><span class="token punctuation">:</span> <span class="token string">'module'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 全局环境对象</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    browser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    es6<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 指定预设规则</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style</span>    <span class="token string">'standard'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// https://github.com/vuejs/eslint-plugin-vue#bulb-rules</span>    <span class="token string">'plugin:vue/recommended'</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li>自定义规则</li></ul><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// https://github.com/babel/babel-eslint/issues/517</span>    <span class="token string">'no-use-before-define'</span><span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string">'comma-dangle'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token string">'always-multiline'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="运行ESLint"><a href="#运行ESLint" class="headerlink" title="运行ESLint"></a>运行ESLint</h4><p>在package.json添加一个script脚本：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"eslint"</span><span class="token punctuation">:</span> <span class="token string">"eslint --ext .js,.jsx,.vue src"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>一些问题可以通过在eslint命令中加入–fix参数自动修复：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"eslint"</span><span class="token punctuation">:</span> <span class="token string">"eslint --ext .js,.jsx,.vue src --fix"</span><span class="token punctuation">}</span></code></pre><p><strong>如果出现Do not use ‘new’ for side effects no-new错误</strong>，需要为错误代码禁用<code>no-new</code>这条规则，在代码前加上一条特殊的注释即可：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// eslint-disable-next-line no-new</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="在Webpack中使用ESLint"><a href="#在Webpack中使用ESLint" class="headerlink" title="在Webpack中使用ESLint"></a>在Webpack中使用ESLint</h4><p>1.将eslint-loader和friendly-errors-webpack-plugin包一起安装到开发依赖，后者能优化控制台信息：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D eslint<span class="token operator">-</span>loader friendly<span class="token operator">-</span>errors<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin</code></pre><p>2.在webpack.config.js中，module.rules顶部添加新的规则：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.(jsx?|vue)$/</span><span class="token punctuation">,</span>      loader<span class="token punctuation">:</span> <span class="token string">'eslint-loader'</span><span class="token punctuation">,</span>      enforce<span class="token punctuation">:</span> <span class="token string">'pre'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>3.导入friendly-errors-webpack-plugin：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> FriendlyErrors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'friendly-errors-webpack-plugin'</span><span class="token punctuation">)</span></code></pre><p>4.在开发模式中添加这个插件：</p><pre class=" language-js"><code class="language-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">new</span> <span class="token class-name">FriendlyErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>现在运行npm run dev，可以在webpack输出中看到ESLint错误信息。<br>没有错误，则看到<code>DONE</code>信息。</p><h3 id="Jest-单元测试"><a href="#Jest-单元测试" class="headerlink" title="Jest 单元测试"></a>Jest 单元测试</h3><p>1.安装包：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D jest vue<span class="token operator">-</span>test<span class="token operator">-</span>utils</code></pre><p>2.还需要安装一些与vue相关的使用工具，以便使用jest-vue来编译.vue文件，并创建组件快照：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D vue<span class="token operator">-</span>jest jest<span class="token operator">-</span>serializer<span class="token operator">-</span>vue vue<span class="token operator">-</span>server<span class="token operator">-</span>renderer</code></pre><p>需要安装一些Babel包来支持Babel编译，并在Jest内动态导入Webpack：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D babel<span class="token operator">-</span>jest babel<span class="token operator">-</span>plugin<span class="token operator">-</span>dynamic<span class="token operator">-</span>import<span class="token operator">-</span>node</code></pre><p><strong>babel-jest不支持babel7，jest运行会报错</strong><br>所以，如果你的babel/core版本为7.x，需要安装包：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D babel<span class="token operator">-</span>core@^7<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token operator">-</span>bridge<span class="token punctuation">.</span>0</code></pre><h4 id="配置Jest"><a href="#配置Jest" class="headerlink" title="配置Jest"></a>配置Jest</h4><p>在项目根目录中创建jest.config.js来配置Jest：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  transform<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'.+\\.jsx?$'</span><span class="token punctuation">:</span> <span class="token string">'&lt;rootDir>/node_modules/babel-jest'</span><span class="token punctuation">,</span>    <span class="token string">'.+\\.vue$'</span><span class="token punctuation">:</span> <span class="token string">'&lt;rootDir>/node_modules/vue-jest'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  snapshotSerializers<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'&lt;rootDir>/node_modules/jest-serializer-vue'</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  mapCoverage<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>为了支持JavaScript import/export 模块以及Jest中的动态导入，需要为Jest配置Babel：</p><ul><li>如果是babel7，.babelrc文件是这样的：</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// Stage 3</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"transform-es2015-modules-commonjs"</span><span class="token punctuation">,</span>        <span class="token string">"dynamic-import-node"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>如果是babel6：</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"stage-0"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"transform-es2015-modules-commonjs"</span><span class="token punctuation">,</span>        <span class="token string">"dynamic-import-node"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="第一个单元测试"><a href="#第一个单元测试" class="headerlink" title="第一个单元测试"></a>第一个单元测试</h4><p>为了使所有地方都默认支持Jest，文件应该命名为component.test.js或者component.spec.js。</p><p>1.在src/components文件夹中创建一个测试文件，如BaseButton.spec.js，从vue-test-utils中导入组件及shallow方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> BaseButton <span class="token keyword">from</span> <span class="token string">'./BaseButton.vue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> shallow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-test-utils'</span></code></pre><p>2.通过<code>describe</code>函数创建测试套件：</p><pre class=" language-js"><code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'BaseButton'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 测试</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>3.在测试套件内，通过test函数添加第一个单元测试：</p><pre class=" language-js"><code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'BaseButton'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'click event'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 测试代码</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>4.在组件外创建一个wrapper对象，它将提供用于测试这个组件的函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>BaseButton<span class="token punctuation">)</span></code></pre><p>5.我们要测试点击这个组件时是否会触发click事件，模拟对组件的点击：</p><pre class=" language-js"><code class="language-js">wrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span></code></pre><p>6.使用Jest的expect方法检测是否触发了click事件：</p><pre class=" language-js"><code class="language-js"><span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>7.在package.json中添加运行Jest的脚本：</p><pre class=" language-js"><code class="language-js"><span class="token string">"jest"</span><span class="token punctuation">:</span> <span class="token string">"jest"</span></code></pre><p>8.然后在终端运行：</p><pre class=" language-powershell"><code class="language-powershell">npm run jest</code></pre><h4 id="ESLint和Jest全局变量"><a href="#ESLint和Jest全局变量" class="headerlink" title="ESLint和Jest全局变量"></a>ESLint和Jest全局变量</h4><p>ESLint检查测试文件会对<code>describe</code>，<code>test</code>， <code>expect</code>等关键字报错，所以要在.eslintrc.js指定jest环境：</p><pre class=" language-js"><code class="language-js">env<span class="token punctuation">:</span> <span class="token punctuation">{</span>  browser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  es6<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  jest<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>现在就不会再出现错误提示了！</p><h4 id="Jest快照"><a href="#Jest快照" class="headerlink" title="Jest快照"></a>Jest快照</h4><p>Jest快照是在每次运行测试时保存并比较的字符串，可以检测潜在的退化。</p><p>对于Vue组件，我们将通过名为<code>vue-server-renderer</code>的服务端渲染工具保存HTML渲染快照：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createRenderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-server-renderer'</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'snapshot'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>BaseButton<span class="token punctuation">,</span> <span class="token punctuation">{</span>    propsData<span class="token punctuation">:</span> <span class="token punctuation">{</span>      icon<span class="token punctuation">:</span> <span class="token string">'add'</span><span class="token punctuation">,</span>      disabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      badge<span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    slots<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'&lt;span>Add Item&lt;/span>'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="更新快照"><a href="#更新快照" class="headerlink" title="更新快照"></a>更新快照</h5><p>使用<code>--updateSnapshot</code>参数时，当vue文件修改之后再次测试，不会提示快照不再匹配。<br>1.在package.json添加一个脚本：</p><pre class=" language-js"><code class="language-js"><span class="token string">"jest"</span><span class="token punctuation">:</span> <span class="token string">"jest --updateSnapshot"</span></code></pre><p>2.通过新的脚本更新快照：</p><pre class=" language-powershell"><code class="language-powershell">npm run jest:update</code></pre><h3 id="i18n-国际化和代码拆分"><a href="#i18n-国际化和代码拆分" class="headerlink" title="i18n 国际化和代码拆分"></a>i18n 国际化和代码拆分</h3><p><a href="http://kazupon.github.io/vue-i18n/zh/introduction.html" target="_blank" rel="noopener">官网</a><br>安装包：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>S vue<span class="token operator">-</span>i18n</code></pre><p>1.安装插件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueI18n <span class="token keyword">from</span> <span class="token string">'vue-i18n'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueI18n<span class="token punctuation">)</span></code></pre><p>2.在项目根目录新建一个i18n文件夹，在其中新建index.js，里面导出了应用支持的语言列表：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>  <span class="token string">'en'</span><span class="token punctuation">,</span>  <span class="token string">'fr'</span><span class="token punctuation">,</span>  <span class="token string">'es'</span><span class="token punctuation">,</span>  <span class="token string">'de'</span><span class="token punctuation">,</span>  <span class="token string">'zh'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">]</span></code></pre><p>3.在index.js旁边新建文件夹locales，并在locales下创建翻译文件</p><ul><li>en.js：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token string">'change-lang'</span><span class="token punctuation">:</span> <span class="token string">'Change language'</span><span class="token punctuation">,</span>  lang<span class="token punctuation">:</span> <span class="token punctuation">{</span>    en<span class="token punctuation">:</span> <span class="token string">'English'</span><span class="token punctuation">,</span>    fr<span class="token punctuation">:</span> <span class="token string">'Français'</span><span class="token punctuation">,</span>    es<span class="token punctuation">:</span> <span class="token string">'Español'</span><span class="token punctuation">,</span>    de<span class="token punctuation">:</span> <span class="token string">'Deutsch'</span><span class="token punctuation">,</span>    zh<span class="token punctuation">:</span> <span class="token string">'简体中文'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  back<span class="token punctuation">:</span> <span class="token string">'Back'</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li>zh.js：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token string">'change-lang'</span><span class="token punctuation">:</span> <span class="token string">'选择语言'</span><span class="token punctuation">,</span>  lang<span class="token punctuation">:</span> <span class="token punctuation">{</span>    en<span class="token punctuation">:</span> <span class="token string">'English'</span><span class="token punctuation">,</span>    fr<span class="token punctuation">:</span> <span class="token string">'Français'</span><span class="token punctuation">,</span>    es<span class="token punctuation">:</span> <span class="token string">'Español'</span><span class="token punctuation">,</span>    de<span class="token punctuation">:</span> <span class="token string">'Deutsch'</span><span class="token punctuation">,</span>    zh<span class="token punctuation">:</span> <span class="token string">'简体中文'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  back<span class="token punctuation">:</span> <span class="token string">'返回'</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li>de.js, es.js, fr.js…</li></ul><p><strong>在编书时还需要<code>babel-preset-stage-2</code>（或更低），以便Babel能解析动态导入</strong></p><p><a href="https://babeljs.io/docs/en/v7-migration" target="_blank" rel="noopener">升级到Babel7</a></p><ul><li>babel6:</li></ul><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D babel<span class="token operator">-</span>preset<span class="token operator">-</span>stage<span class="token operator">-</span>2</code></pre><ul><li>babel7:</li></ul><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>D @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>proposal<span class="token operator">-</span>decorators @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>proposal<span class="token operator">-</span><span class="token keyword">function</span><span class="token operator">-</span>sent @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>proposal<span class="token operator">-</span>export<span class="token operator">-</span>namespace<span class="token operator">-</span><span class="token keyword">from</span> @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>proposal<span class="token operator">-</span>numeric<span class="token operator">-</span>separator @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>proposal<span class="token operator">-</span><span class="token keyword">throw</span><span class="token operator">-</span>expressions</code></pre><h4 id="动态导入的代码拆分"><a href="#动态导入的代码拆分" class="headerlink" title="动态导入的代码拆分"></a>动态导入的代码拆分</h4><p>通过import函数对文件进行动态导入，它需要将路径作为接收参数并返回一个Promise，这个Promise会在从服务器加载完毕后最终确定对应的JavaScript模块。<br>在Webpack中，动态导入功能有时候也叫“代码拆分”。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> createI18n <span class="token punctuation">(</span>locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 动态导入加载异步模块</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> localeMessages <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`../../i18n/locales/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>locale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>locale<span class="token punctuation">]</span><span class="token punctuation">:</span> localeMessages<span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 传入locale参数</span>  <span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueI18n</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    locale<span class="token punctuation">,</span>    messages<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> i18n<span class="token punctuation">}</span></code></pre><h4 id="自动加载用户区域设置"><a href="#自动加载用户区域设置" class="headerlink" title="自动加载用户区域设置"></a>自动加载用户区域设置</h4><p>1.获取语言包：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> getAutoLang <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 通过 navigator.userLanguage 来获取区域代码</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userLanguage <span class="token operator">||</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>language  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 默认en</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>langs<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'en'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.在src/main.js中，导入如下两个新的工具函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createI18n<span class="token punctuation">,</span> getAutoLang <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./utils/i18n'</span></code></pre><p>3.然后修改main函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取首选区域设置</span>  <span class="token keyword">const</span> locale <span class="token operator">=</span> <span class="token function">getAutoLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 创建并等待返回i18n函数</span>  <span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createI18n</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>locale<span class="token punctuation">)</span>  <span class="token keyword">await</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// eslint-disable-next-line no-new</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    router<span class="token punctuation">,</span>    store<span class="token punctuation">,</span>    i18n<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将i18n注入应用</span>    <span class="token operator">...</span>App<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="更改语言页面"><a href="#更改语言页面" class="headerlink" title="更改语言页面"></a>更改语言页面</h4><p>1.在src/router.js导入PageLocale组件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> PageLocale <span class="token keyword">from</span> <span class="token string">'./components/PageLocale.vue'</span></code></pre><p>2.接着在routes数组的最后一个路由之前加入locale路由：</p><pre class=" language-js"><code class="language-js">  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/locale'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'locale'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> PageLocale <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>3.在AppFooter.vue中，将路由加入模板：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$route.name !<span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>locale<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name: <span class="token punctuation">'</span>locale<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ $t('change-lang') }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>PageLocale的代码如下：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BasePage</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page-locale<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BaseLoading</span>        <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span>        <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>overlay<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">$t</span><span class="token punctuation">(</span><span class="token string">'change-lang'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>locales<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>            <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lang</span> <span class="token attr-name">of</span> <span class="token attr-name">langs"</span>            <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lang<span class="token punctuation">"</span></span>            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>locale<span class="token punctuation">"</span></span>          <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BaseButton</span>              <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{</span> <span class="token attr-name"><span class="token namespace">selected:</span></span> <span class="token attr-name">lang</span> <span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span></span> <span class="token attr-name">$i18n.locale</span> <span class="token attr-name">}"</span>              <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setLocale(lang)<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>              <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">$t</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`lang.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lang<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BaseButton</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toolbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BaseButton</span>            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>secondary<span class="token punctuation">"</span></span>            <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goBack<span class="token punctuation">"</span></span>          <span class="token punctuation">></span></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">$t</span><span class="token punctuation">(</span><span class="token string">'back'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BaseButton</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BasePage</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> langs <span class="token keyword">from</span> <span class="token string">'../../i18n'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      langs<span class="token punctuation">,</span>      loading<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    goBack <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">async</span> setLocale <span class="token punctuation">(</span>locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span>messages<span class="token punctuation">[</span>locale<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> messages <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`../../i18n/locales/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>locale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span><span class="token function">setLocaleMessage</span><span class="token punctuation">(</span>locale<span class="token punctuation">,</span> messages<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span>locale <span class="token operator">=</span> locale      <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylus<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">/* ... */</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h3><p>1.安装包：</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>S moment</code></pre><p>2.<code>filters.js</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">"moment"</span><span class="token keyword">export</span> <span class="token keyword">function</span> date <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">moment</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>3.导入<code>main.js</code>并全局注册：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> filters <span class="token keyword">from</span> <span class="token string">'./filters'</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> filters<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> filters<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Vue.js项目实战》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h3&gt;&lt;p&gt;1.安装包：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;powershell&quot;&gt;npm install axios -S&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.在src/utils文件夹中创建http.js：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://zhanyunmian.coding.me/tags/Vue/"/>
    
      <category term="vue-plugin" scheme="http://zhanyunmian.coding.me/tags/vue-plugin/"/>
    
      <category term="axios" scheme="http://zhanyunmian.coding.me/tags/axios/"/>
    
      <category term="json-server" scheme="http://zhanyunmian.coding.me/tags/json-server/"/>
    
      <category term="autoprefixer" scheme="http://zhanyunmian.coding.me/tags/autoprefixer/"/>
    
      <category term="ESLint" scheme="http://zhanyunmian.coding.me/tags/ESLint/"/>
    
      <category term="Jest" scheme="http://zhanyunmian.coding.me/tags/Jest/"/>
    
      <category term="i18n" scheme="http://zhanyunmian.coding.me/tags/i18n/"/>
    
      <category term="moment" scheme="http://zhanyunmian.coding.me/tags/moment/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://zhanyunmian.coding.me/2019/08/06/JavaScript/"/>
    <id>http://zhanyunmian.coding.me/2019/08/06/JavaScript/</id>
    <published>2019-08-06T10:05:50.000Z</published>
    <updated>2019-10-19T15:11:34.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id><a href="#" class="headerlink" title="!!"></a><code>!!</code></h3><p>类型转换：将对应的类型转换为boolean型<br><strong>!!b指的是将b转换为boolean值</strong>，<em>取两次非是因为将b转换位boolean值后取了一次非，所以得到的值正好相反，再取一次反回来</em></p><a id="more"></a><h3 id="计算运行时间（性能）"><a href="#计算运行时间（性能）" class="headerlink" title="计算运行时间（性能）"></a>计算运行时间（性能）</h3><iframe id="cp_embed_pMpZpe" src="//codepen.io/siluo2000/embed/pMpZpe?height=500&theme-id=dark&slug-hash=pMpZpe&default-tab=[js,result]&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>总结:</p><ol><li>有开有关</li><li>参数一致</li><li>ie不支持,要使用Date计算</li></ol><h3 id="document-addEventListener"><a href="#document-addEventListener" class="headerlink" title="document.addEventListener"></a>document.addEventListener</h3><p>参考资料：<a href="http://blog.sina.com.cn/s/blog_5d64f7e301017qdp.html" target="_blank" rel="noopener">js之事件冒泡和事件捕获</a></p><p>1.冒泡和下沉<br><code>document.addEventListener(&quot;事件名称&quot;, 函数, Boolean);</code><br>addEventListener里最后一个参数决定该事件的响应顺序；</p><iframe id="cp_embed_bXajyB" src="//codepen.io/siluo2000/embed/bXajyB?height=500&theme-id=dark&slug-hash=bXajyB&default-tab=js,result&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><ul><li>true 的触发顺序总是在 false 之前；</li><li>如果多个均为 true，则外层的触发先于内层；</li><li>如果多个均为 false，则内层的触发先于外层。</li></ul><p>2.解决让一个js事件执行多个函数</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// --->只输出b</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --->输出a,b</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;!!&quot;&gt;&lt;/a&gt;&lt;code&gt;!!&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;类型转换：将对应的类型转换为boolean型&lt;br&gt;&lt;strong&gt;!!b指的是将b转换为boolean值&lt;/strong&gt;，&lt;em&gt;取两次非是因为将b转换位boolean值后取了一次非，所以得到的值正好相反，再取一次反回来&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://zhanyunmian.coding.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS</title>
    <link href="http://zhanyunmian.coding.me/2019/08/06/CSS/"/>
    <id>http://zhanyunmian.coding.me/2019/08/06/CSS/</id>
    <published>2019-08-06T10:05:26.000Z</published>
    <updated>2019-10-19T13:16:06.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="offsetTop"><a href="#offsetTop" class="headerlink" title="offsetTop"></a>offsetTop</h3><ol><li>父级边框不算</li><li>offsetTop是相对 relative 的定位</li></ol><a id="more"></a><h3 id="nth-child-amp-nth-of-type"><a href="#nth-child-amp-nth-of-type" class="headerlink" title="nth-child &amp; nth-of-type"></a>nth-child &amp; nth-of-type</h3><iframe id="cp_embed_oKMRaR" src="//codepen.io/siluo2000/embed/oKMRaR?height=500&theme-id=dark&slug-hash=oKMRaR&default-tab=[html,result]&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="手机屏幕分辨率-amp-手机浏览器分辨率"><a href="#手机屏幕分辨率-amp-手机浏览器分辨率" class="headerlink" title="手机屏幕分辨率 &amp; 手机浏览器分辨率"></a>手机屏幕分辨率 &amp; 手机浏览器分辨率</h3><p>手机屏幕分辨率<br>做手机应用时：<br><code>@media screen and (min-device-width:640px) and (max-device-width:960px)</code><br>手机浏览器分辨率<br><code>@media screen and (min-width:320px) and (max-width:480px)</code></p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"浏览器分辨率是"</span><span class="token operator">+</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"屏幕分辨率是"</span><span class="token operator">+</span>window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="负边距"><a href="#负边距" class="headerlink" title="负边距"></a>负边距</h3><p>在文档流中，元素的最终边界是由margin决定的，margin为负的时候就相当于元素的边界向里收，文档流认的只是这个边界，不会管你实际的尺寸是多少。</p><iframe id="cp_embed_eqKEqy" src="//codepen.io/siluo2000/embed/eqKEqy?height=500&theme-id=dark&slug-hash=eqKEqy&default-tab=[html,result]&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="清浮动"><a href="#清浮动" class="headerlink" title="清浮动"></a>清浮动</h3><p>1.给浮动元素父级加float — 不实用<br>2.空标签清浮动</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.clear</span></span><span class="token punctuation">{</span> <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span> <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>3.在父级加<code>overflow: hidden</code>清浮动</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clear</span></span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.after伪类清浮动</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clear</span></span><span class="token punctuation">{</span>  <span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clear</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Firefox &lt; 3.5 */</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>Bootstrap3的清除是这样的：</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/** * 现代浏览器 * 1. content的空格内容是为了避免Opera浏览器bug，但是它会导致空格内容出现在元素顶部和底部。 * 2. 当使用 `before` 包含子元素的上边距时，必须使用 `table` 而不使用 `block`，可以防止上边距折叠。 */</span><span class="token selector"><span class="token class">.cf</span><span class="token pseudo-element">:before</span>,<span class="token class">.cf</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 1 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.cf</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * For IE 6/7 only * 触发hasLayout并清除浮动 */</span><span class="token selector"><span class="token class">.cf</span> </span><span class="token punctuation">{</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>支持：Firefox 3.5 +，Safari 4 +，Chrome，Opera 9 +，IE 6+</strong><br>资料：<a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="noopener">clearfix hack</a></p><ul><li>Bootstrap4的清除是这样的：</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="两端对齐"><a href="#两端对齐" class="headerlink" title="两端对齐"></a>两端对齐</h3><p>参考资料：<a href="https://www.cnblogs.com/runhua/p/7106060.html" target="_blank" rel="noopener">css：text-align：justify的用法</a></p><iframe id="cp_embed_OKEqWz" src="//codepen.io/siluo2000/embed/OKEqWz?height=500&theme-id=dark&slug-hash=OKEqWz&default-tab=[html,result]&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="样式系统匹配规则"><a href="#样式系统匹配规则" class="headerlink" title="样式系统匹配规则"></a>样式系统匹配规则</h3><p>样式系统匹配规则是从key selector开始的，然后往左移动（根据选择器寻找任何的祖先元素）。</p><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>比较难记的：</p><iframe id="cp_embed_xvzvjp" src="//codepen.io/siluo2000/embed/xvzvjp?height=500&theme-id=dark&slug-hash=xvzvjp&default-tab=[html,result]&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="inline-block兼容"><a href="#inline-block兼容" class="headerlink" title="inline-block兼容"></a>inline-block兼容</h3><ul><li><p>兼容问题：</p><ol><li>IE6、IE7不识别inline-block</li><li>IE8  resize-bug</li></ol></li><li><p>兼容写法：</p></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">selector</span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span>  <span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*IE 下触发 hasLayout*/</span>  *<span class="token property">display</span><span class="token punctuation">:</span>inline<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*一旦IE下触发了hasLayout，设置 block 元素为 inline 会使 display:inline 效果与 display:inline-block 相似*/</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;offsetTop&quot;&gt;&lt;a href=&quot;#offsetTop&quot; class=&quot;headerlink&quot; title=&quot;offsetTop&quot;&gt;&lt;/a&gt;offsetTop&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;父级边框不算&lt;/li&gt;
&lt;li&gt;offsetTop是相对 relative 的定位&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="CSS" scheme="http://zhanyunmian.coding.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="http://zhanyunmian.coding.me/2019/08/06/HTML/"/>
    <id>http://zhanyunmian.coding.me/2019/08/06/HTML/</id>
    <published>2019-08-06T10:04:53.000Z</published>
    <updated>2019-10-19T13:16:06.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lt-table-gt"><a href="#lt-table-gt" class="headerlink" title="&lt;table&gt;"></a><code>&lt;table&gt;</code></h3><iframe id="cp_embed_NQwQpX" src="//codepen.io/siluo2000/embed/NQwQpX?height=500&theme-id=dark&slug-hash=NQwQpX&default-tab=[html,result]&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><a id="more"></a><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>内联元素 inline element，中文叫法有多种：内联元素、内嵌元素、行内元素、直进式元素等。<br>比较特别的行元素：<code>&lt;textarea&gt;</code> <code>&lt;select&gt;</code></p><h3 id="Unicode-UTF-8"><a href="#Unicode-UTF-8" class="headerlink" title="Unicode UTF-8"></a>Unicode UTF-8</h3><h4 id="什么是Unicode"><a href="#什么是Unicode" class="headerlink" title="什么是Unicode"></a>什么是Unicode</h4><p>Universal Multiple-Octet Coded Character Set,简称UCS.<br>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码.<br>Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。Unicode用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符，或者说有1114112个码位。码位就是可以分配给字符的数字。UTF-8、UTF-16、UTF-32都是将数字转换到程序数据的编码方案。<br>中文范围 4E00-9FBF</p><h4 id="什么是UCS-2、UCS-4"><a href="#什么是UCS-2、UCS-4" class="headerlink" title="什么是UCS-2、UCS-4"></a>什么是UCS-2、UCS-4</h4><p>UCS-2用两个字节编码，UCS-4用4个字节编码。<br>UCS-2也称为基本多文种平面。<br>UCS-2转换到UCS-4只是简单的在前面加２个字节0。</p><h4 id="什么是UTF-8"><a href="#什么是UTF-8" class="headerlink" title="什么是UTF-8"></a>什么是UTF-8</h4><p>UTF是“UCS Transformation Format”的缩写，可以翻译成Unicode字符集转换格式。</p><table><thead><tr><th>Unicode编码(十六进制)</th><th>UTF-8 字节流(二进制)</th></tr></thead><tbody><tr><td>000000 - 00007F</td><td>0xxxxxxx</td></tr><tr><td>000080 - 0007FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>000800 - 00FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>010000 - 10FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p>UTF-8的特点是对不同范围的字符使用不同长度的编码。<br>对于0x00-0x7F之间的字符，UTF-8编码与ASCII编码完全相同。UTF-8编码的最大长度是4个字节。从上表可以看出，4字节模板有21个x，即可以容纳21位二进制数字。Unicode的最大码位0x10FFFF也只有21位。</p><h3 id="utf8-unicode-ci-amp-utf8-general-ci"><a href="#utf8-unicode-ci-amp-utf8-general-ci" class="headerlink" title="utf8_unicode_ci &amp; utf8_general_ci"></a>utf8_unicode_ci &amp; utf8_general_ci</h3><ol><li>对于一种语言仅当使用utf8_unicode_ci排序做的不好时，才执行与具体语言相关的utf8字符集校对规则。例如，对于德语和法语，utf8_unicode_ci工作的很好，因此不再需要为这两种语言创建特殊的utf8校对规则。</li><li>utf8_general_ci也适用与德语和法语，除了‘?’等于‘s’，而不是‘ss’之外。如果你的应用能够接受这些，那么应该使用 utf8_general_ci，因为它速度快。否则，使用utf8_unicode_ci，因为它比较准确。</li></ol><p>用一句话概况上面这段话：utf8_unicode_ci比较准确，utf8_general_ci速度比较快。通常情况下 utf8_general_ci的准确性就够我们用的了，在我看过很多程序源码后，发现它们大多数也用的是utf8_general_ci，所以新建数据库时一般选用utf8_general_ci就可以了。</p><h3 id="language-quot-Javascript-quot"><a href="#language-quot-Javascript-quot" class="headerlink" title="language=&quot;Javascript&quot;"></a><code>language=&quot;Javascript&quot;</code></h3><p>在制作网页的时候，往往需要在页面中使用客户端能够运行的JS代码，因此，都需要添加引用。<br>JS引用一般有type=”text/javascript”和language=”Javascript”两种写法，但language这个属性在W3C的HTML标准中，<strong>已不再推荐使用</strong>。</p><h3 id="xmlns"><a href="#xmlns" class="headerlink" title="xmlns"></a>xmlns</h3><p>xmlns 属性在 XHTML 中是必需的。不过即使你的 XHTML 文档没有使用此属性，W3C 的验证器也不会报错。因为 <code>&quot;xmlns=http://www.w3.org/1999/xhtml&quot;</code> 是一个固定值，所以，即使你没有包含它，此值也会被添加到 <code>&lt;html&gt;</code> 标签中。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- xmlns            是用来定义xml namespace属性的 --></span><span class="token comment" spellcheck="true">&lt;!-- xml:lang="en"    指明编码为英文 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xml:</span>lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 常见用法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h3><p>SEO由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。</p><h4 id="meta、title"><a href="#meta、title" class="headerlink" title="meta、title"></a><code>meta</code>、<code>title</code></h4><p>META标签分两大部分：HTTP标题信息（HTTP-EQUIV）和页面描述信息（NAME）。<br><code>&lt;meta name=&quot;keywords&quot; content=&quot;为搜索引擎提供的关键字列表&quot;&gt;</code><br>各关键词间用英文逗号“,”隔开。META的通常用处是指定搜索引擎用来提高搜索质量的关键词。<br>当数个META元素提供文档语言从属信息时，搜索引擎会使用lang特性来过滤并通过用户的语言优先参照来显示搜索结果。<br><code>&lt;meta name=&quot;description&quot; content=&quot;用来告诉搜索引擎，你的网站主要内容&quot;&gt;</code></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- HTML 和 XHTML 标签都没有指定任何预先定义的 &lt;meta> 名称 --></span><span class="token comment" spellcheck="true">&lt;!-- "keywords" 是一个经常被用到的名称。它为文档定义了一组关键字。某些搜索引擎在遇到这些关键字时，会用这些关键字对文档进行分类。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- http-equiv指示服务器在发送实际的文档之前先在要传送给浏览器的 MIME 文档头部包含名称/值对。 --></span><span class="token comment" spellcheck="true">&lt;!-- 所有服务器都至少要向浏览器发送一个：content-type:text/html。这将告诉浏览器准备接受一个 HTML 文档。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ul><li><code>meta</code>必填属性：</li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>content</td><td>some_text</td><td>定义与 http-equiv 或 name 属性相关的元信息</td></tr></tbody></table><ul><li><code>meta</code>可选属性：</li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>http-equiv</td><td>content-type / expires / refresh / set-cookie</td><td>把 content 属性关联到 HTTP 头部。</td></tr><tr><td>name</td><td>author / description / keywords / generator / revised / others…</td><td>把 content 属性关联到一个名称。</td></tr><tr><td>scheme</td><td>some_text</td><td>定义用于翻译 content 属性值的格式。</td></tr></tbody></table><p>1.<a href="https://www.cnblogs.com/menyiin/p/6527339.html" target="_blank" rel="noopener">X-UA-Compatible</a>:</p><ol><li>X-UA-Compatible定义浏览器的渲染方式</li><li>IE可以变身Chrome，前提是客户端安装了Chrome Frame（Chrome有一个项目Chrome Frame，这个项目目的是在不改变IE外观的情况下使用Chrome内核，但是这个项目在2014年已经不提供支持服务了。）</li><li>使用IE内核浏览器来访问，会渲染至浏览器的最高版本，比如使用IE 9，就算切换到IE 7，仍会渲染到IE 9的样子</li></ol><p>2.<a href="https://blog.csdn.net/adc_god/article/details/51531263" target="_blank" rel="noopener">meta name=”renderer”</a><br>针对国内双核浏览器，控制渲染内核</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- webkit     默认用极速核 --></span><span class="token comment" spellcheck="true">&lt;!-- ie-comp    默认用IE兼容内核 IE6/7 --></span><span class="token comment" spellcheck="true">&lt;!-- ie-stand   默认用IE标准内核 取决于用户的最高IE版本--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webkit|ie-comp|ie-stand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h5 id="charset"><a href="#charset" class="headerlink" title="charset"></a>charset</h5><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- charset=iso-8859-1     是西欧的编码，代表说明网站是采用的编码是英文 --></span><span class="token comment" spellcheck="true">&lt;!-- charset=gb2312         代表说明网站是采用的编码是简体中文 --></span><span class="token comment" spellcheck="true">&lt;!-- charset=utf-8          代表世界通用的语言编码 --></span><span class="token comment" spellcheck="true">&lt;!-- charset=big5           又称为大五码或五大码，是使用繁体中文（正体中文）社区中最常用的电脑汉字字符集标准 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>iso-8859-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 常见用法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h5 id="大网SEO摘抄"><a href="#大网SEO摘抄" class="headerlink" title="大网SEO摘抄"></a>大网SEO摘抄</h5><ul><li>淘宝网</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>淘宝网 - 淘！我喜欢<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spm-id<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a21bo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aplus-xplug<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>NONE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keyword<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//g.alicdn.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//img.alicdn.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//tce.alicdn.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//gm.mmstat.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//tce.taobao.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//log.mmstat.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//tui.taobao.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//ald.taobao.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//gw.alicdn.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//atanx.alicdn.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//dfhs.tanx.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//ecpm.tanx.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//res.mmstat.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//img.alicdn.com/tps/i3/T1OjaVFl4dXXa.JOZB-114-114.png<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ul><li>京东</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>京东(JD.COM)-正品低价、品质保障、配送及时、轻松购物！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span>      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//static.360buyimg.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//misc.360buyimg.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//img10.360buyimg.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//img11.360buyimg.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//img12.360buyimg.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//img13.360buyimg.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//img14.360buyimg.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//img20.360buyimg.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//img30.360buyimg.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//d.3.cn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//d.jd.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//www.jd.com/favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">mce_href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//www.jd.com/favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li>亚马逊</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x-dns-prefetch-control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//images-cn.ssl-images-amazon.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//completion.amazon.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//fls-cn.amazon.cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//d1y6jrbzotnyjg.cloudfront.net<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>亚马逊-网上购物商城：要网购, 就来Z.cn!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>亚马逊中国（z.cn）坚持“以客户为中心”的理念，秉承“天天低价，正品行货”信念，销售图书、电脑、数码家电、母婴百货、服饰箱包等上千万种产品。亚马逊中国提供专业服务：正品行货天天低价，机打发票全国联保。货到付款，30天内可退换货。亚马逊为中国消费者提供便利、快捷的网购体验。<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网购,网上购物,在线购物,网购网站,网购商城,购物网站,网购中心,购物中心,卓越,亚马逊,卓越亚马逊,亚马逊中国,joyo,amazon<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>google<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nositelinkssearchbox<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>google-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BRIrL18qELSCSHu-BNlO7z9T0qAjBuunDmK8hLNTBI8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baidu-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>px8yGWK5e5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msvalidate.01<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3C8D6512B1E530046DE0569BA27093F3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>qc:admins<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>151133107161512766375<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>360-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bd110b885b8997880a215e7967f6eacf<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shenma-site-verification<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>284a51a948242d608c9293a9b0c8c04e<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canonical<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.amazon.cn/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fb:app_id<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>164734381262<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>twitter:card<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>summary<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>twitter:site:id<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20793816<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>亚马逊中国（z.cn）坚持“以客户为中心”的理念，秉承“天天低价，正品行货”信念，销售图书、电脑、数码家电、母婴百货、服饰箱包等上千万种产品。亚马逊中国提供专业服务：正品行货天天低价，机打发票全国联保。货到付款，30天内可退换货。亚马逊为中国消费者提供便利、快捷的网购体验。<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>og</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://opengraphprotocol.org/schema/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ul><li>博客园</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>origin<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cache-Control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-transform<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cache-Control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-siteapp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>图难于其易 - 博客园<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/bundles/blog-common.css?v<span class="token punctuation">=</span>KOZafwuaDasEedEenI5aTy8aXH0epbm6VUJ0v3vsT_Q1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MainCss<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/skins/LessIsMore/bundle-LessIsMore.css?v<span class="token punctuation">=</span>K-SPbyFTmacJSNw1O1LzZFcIaS56dT8uEKlXYOxLR9k1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/blog/customcss/215511.css?v<span class="token punctuation">=</span>L8nGtbdlgeKKuDLd%2feVyQNV2Vz8%3d<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mobile-style<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>only screen and (max-width: 767px)<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/skins/LessIsMore/bundle-LessIsMore-mobile.css?v<span class="token punctuation">=</span>Go8Bj0ZU9gZXuPSKWcSQabps3E1njgJKYz4DiOq6-N41<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RSS<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/rss+xml<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alternate<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.cnblogs.com/siluo2000/rss<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RSD<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/rsd+xml<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EditURI<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.cnblogs.com/siluo2000/rsd.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/wlwmanifest+xml<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wlwmanifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.cnblogs.com/siluo2000/wlwmanifest.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="img"><a href="#img" class="headerlink" title="img"></a>img</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片路径<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片描述<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>图片中要加入alt，由于网速太慢，图片打不开，有alt，用户也就知道这张图片的内容了，对于电商来说，这个尤其重要，尽量给图片的尺寸要吻合，图片偏大偏小，不利于图片加载。<br>但我看了淘宝、亚马逊也不是每个图片都加<code>alt</code>的。<br>示例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://images-cn.ssl-images-amazon.com/images/I/41pGzecSovL._SS75_.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>75<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>亚马逊海外购<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>75<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h4 id="title"><a href="#title" class="headerlink" title="title"></a>title</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><ul><li>淘宝网：</li></ul><p>淘宝某商品页面统计： h1/0, h2/0, h3/2, h4/0,h5/0, h6/0</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//www.taobao.com<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-bd clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>淘宝网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector"><span class="token class">.logo-bd</span> </span><span class="token punctuation">{</span><span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.tbh-ad-inner</span></span><span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span>none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.decorations-box</span></span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.cup</span> <span class="token class">.top</span></span><span class="token punctuation">{</span><span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">9</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">body <span class="token class">.logo</span> <span class="token class">.logo-hover</span></span><span class="token punctuation">{</span><span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">42</span>px<span class="token punctuation">}</span>      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https:&amp;#x2F;&amp;#x2F;pages.tmall.com&amp;#x2F;wow&amp;#x2F;a&amp;#x2F;act&amp;#x2F;tmall&amp;#x2F;23149&amp;#x2F;pageFrame?wh_biz<span class="token punctuation">=</span>tm&amp;amp;wh_weex<span class="token punctuation">=</span>true&amp;amp;wx_main_hc<span class="token punctuation">=</span>true&amp;amp;wh_bizStageId<span class="token punctuation">=</span>765<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-hover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://img.alicdn.com/tfs/TB1APaub.Y1gK0jSZFMXXaWcVXa-190-121.gif<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">190</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">121</span>px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><ul><li>亚马逊：</li></ul><p>亚马逊某商品页面统计： h1/1, h2/3, h3/4, h4/1,h5/0, h6/0</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a-size-large a-spacing-none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>productTitle<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a-size-large<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Calvin Klein 墨镜 亚洲款 CK4344SA  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a-state<span class="token punctuation">"</span></span> <span class="token attr-name">data-a-state</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{&amp;quot;key&amp;quot;:&amp;quot;agsMTState&amp;quot;}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token punctuation">{</span><span class="token string">"isOriginalText"</span><span class="token punctuation">:</span><span class="token string">"true"</span><span class="token punctuation">,</span><span class="token string">"showTooltip"</span><span class="token punctuation">:</span><span class="token string">"false"</span><span class="token punctuation">,</span><span class="token string">"tooltipContent"</span><span class="token punctuation">:</span><span class="token string">"中文翻译，点击查看"</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>agsMT-popover<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ags-mt-popover-title-badge<span class="token punctuation">"</span></span> <span class="token attr-name">data-asin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>B07T9CMPK3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ags-mt-popover-title<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a-popover-trigger a-declarative agsMT-badge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      原文    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a-icon a-icon-popover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>agsMT-legal-disclaimer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a-color-tertiary a-text-normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      页面含机器翻译，中文仅供参考，以原文为准    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>H1-H6：</p><ul><li>按照权重，重要的标题需用H1标签，以此类推，一般页面中最少有一个H1标签，在标题中也要加上title(但是淘宝和亚马逊都没有title属性？)</li><li>不能乱用，h1只能在网页出现一次</li></ul><p>Strong、em标签与b、i标签：如果想要强调加粗、倾斜需用Strong、em标签，一般加粗、倾斜用b、i标签就可以（或者通过css样式写出来）。</p><h4 id="外链"><a href="#外链" class="headerlink" title="外链"></a>外链</h4><p><strong>外链建设不要含数量</strong> 关键词的排名虽然跟外链建设息息相关，但并不是跟外链数量直接挂钩。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://www.cnblogs.com/menyiin/p/6527339.html" target="_blank" rel="noopener">浅析网页meta标签中X-UA-Compatible属性的使用</a></li><li><a href="https://www.w3school.com.cn/tags/tag_meta.asp" target="_blank" rel="noopener">w3school - HTML <code>&lt;meta&gt;</code> 标签</a></li><li><a href="https://www.taobao.com/" target="_blank" rel="noopener">淘宝网</a></li><li><a href="https://www.jd.com/" target="_blank" rel="noopener">京东</a></li><li><a href="https://www.amazon.cn/" target="_blank" rel="noopener">亚马逊</a></li><li><a href="https://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;lt-table-gt&quot;&gt;&lt;a href=&quot;#lt-table-gt&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;table&amp;gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;iframe id=&quot;cp_embed_NQwQpX&quot; src=&quot;//codepen.io/siluo2000/embed/NQwQpX?height=500&amp;theme-id=dark&amp;slug-hash=NQwQpX&amp;default-tab=[html,result]&amp;embed-version=2&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; height=&quot;500&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; class=&quot;cp_embed_iframe&quot; style=&quot;width: 100%; overflow: hidden;&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
    
      <category term="HTML" scheme="http://zhanyunmian.coding.me/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>前端基础知识零碎</title>
    <link href="http://zhanyunmian.coding.me/2019/08/05/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%9B%B6%E7%A2%8E/"/>
    <id>http://zhanyunmian.coding.me/2019/08/05/前端基础知识零碎/</id>
    <published>2019-08-05T15:44:25.000Z</published>
    <updated>2019-10-19T13:11:50.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><h4 id="在手机上测试网页遇到的问题"><a href="#在手机上测试网页遇到的问题" class="headerlink" title="在手机上测试网页遇到的问题"></a>在手机上测试网页遇到的问题</h4><p>前提： wamp环境，手机和电脑在同一个路由下，无法用手机打开电脑网页</p><ol><li>首先关闭电脑上的防火墙</li><li>看看机器上是否有些什么杀毒软件，例如机器上有一个偌顿（ESET），关闭上面的防火墙设置</li><li>看看你的电脑上是否允许访问80端口</li></ol><a id="more"></a><h4 id="jquery表单序列化"><a href="#jquery表单序列化" class="headerlink" title="jquery表单序列化"></a>jquery表单序列化</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.serialize</span><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//序列化</span>params <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//解决中文乱码</span><span class="token comment" spellcheck="true">// 2.serializeArray，不需要decodeURIComponent</span><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serializeArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//序列化</span></code></pre><iframe id="cp_embed_ymRVoV" src="//codepen.io/siluo2000/embed/ymRVoV?height=500&theme-id=dark&slug-hash=ymRVoV&default-tab=js,result&embed-version=2" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Debug&quot;&gt;&lt;a href=&quot;#Debug&quot; class=&quot;headerlink&quot; title=&quot;Debug&quot;&gt;&lt;/a&gt;Debug&lt;/h3&gt;&lt;h4 id=&quot;在手机上测试网页遇到的问题&quot;&gt;&lt;a href=&quot;#在手机上测试网页遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;在手机上测试网页遇到的问题&quot;&gt;&lt;/a&gt;在手机上测试网页遇到的问题&lt;/h4&gt;&lt;p&gt;前提： wamp环境，手机和电脑在同一个路由下，无法用手机打开电脑网页&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先关闭电脑上的防火墙&lt;/li&gt;
&lt;li&gt;看看机器上是否有些什么杀毒软件，例如机器上有一个偌顿（ESET），关闭上面的防火墙设置&lt;/li&gt;
&lt;li&gt;看看你的电脑上是否允许访问80端口&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue入门笔记四(vue-router)</title>
    <link href="http://zhanyunmian.coding.me/2019/08/05/Vue%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E5%9B%9B-vue-router/"/>
    <id>http://zhanyunmian.coding.me/2019/08/05/Vue入门笔记四-vue-router/</id>
    <published>2019-08-05T13:18:26.000Z</published>
    <updated>2019-10-19T13:16:06.639Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《Vue.js项目实战》</p></blockquote><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><a id="more"></a><h3 id="安装vue-router"><a href="#安装vue-router" class="headerlink" title="安装vue-router"></a>安装vue-router</h3><p>1.在项目目录中使用以下命令从<code>npm</code>下载<code>vue-router</code>包：</p><pre class=" language-powershell"><code class="language-powershell">npm install <span class="token operator">-</span>S vue<span class="token operator">-</span>router</code></pre><p>2.在<code>main.js</code>文件旁边创建<code>router.js</code>，并从相应的包中导入<code>Vue</code>库和<code>VueRouter</code>插件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span></code></pre><p>3.然后将该插件安装到<code>Vue</code>中：</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="使用router-view进行布局"><a href="#使用router-view进行布局" class="headerlink" title="使用router-view进行布局"></a>使用<code>router-view</code>进行布局</h3><p>在需要渲染路由的其他组件中，如<code>App.vue</code>，添加<code>&lt;router-view /&gt;</code>组件：</p><ul><li><code>&lt;router-view /&gt;</code>组件是由vue-router插件提供的一个特殊组件，它将渲染匹配当前路由的组件</li><li><code>&lt;router-view /&gt;</code>不是一个真正的组件，因为它没有自己的模板，并且不会出现在DOM中</li></ul><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../assets/logo.svg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>My shirt shop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 菜单将放在这里 <span class="token operator">--</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h3><p>1.创建<code>Home.vue</code></p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome to our support center<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>We are here to help<span class="token operator">!</span> Please read the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>##<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>F<span class="token punctuation">.</span>A<span class="token punctuation">.</span>Q<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> first<span class="token punctuation">,</span> and <span class="token keyword">if</span> you don't find the answer to your question<span class="token punctuation">,</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>##<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>send us a ticket<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>2.创建<code>FAQ.vue</code></p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>faq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Frenquently Asked Questions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>3.在<code>router.js</code>文件中导入刚刚创建的两个组件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./components/Home'</span><span class="token punctuation">;</span><span class="token keyword">import</span> FAQ <span class="token keyword">from</span> <span class="token string">'./components/FAQ'</span><span class="token punctuation">;</span></code></pre><p>4.创建一个<code>routes</code>数组：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// 路由将放在这里</span><span class="token punctuation">]</span></code></pre><p>5.在<code>routes</code>数组中添加两个路由：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 可选，建议使用，方便维护</span>    component<span class="token punctuation">:</span> Home  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/faq'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'faq'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> FAQ  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="路由器对象"><a href="#路由器对象" class="headerlink" title="路由器对象"></a>路由器对象</h3><p>我们将使用<code>vue-router</code>包中的<code>VueRouter</code>构造函数创建一个<code>router</code>对象来管理路由。<br>1.在<code>router.js</code>中的<code>routes</code>数组之后创建一个新的<code>router</code>对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.导出router对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><p>3.在main.js中导入router对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token punctuation">;</span></code></pre><p>4.然后将其作为一个定义选项添加到Vue根实例中：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>AppLayout<span class="token punctuation">)</span><span class="token punctuation">,</span>  router<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>当浏览器URL为<code>http://localhost:4000/#/</code>时，渲染<code>Home.vue</code>组件</li><li>当浏览器URL为<code>http://localhost:4000/#/faq</code>时，渲染<code>FAQ.vue</code>组件</li></ul><h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>使用<code>mode</code>参数更改路由器模式：<br>1.<code>hash</code><br>访问URL: <code>http://localhost:4000/#/faq</code></p><p>优点: 最安全，全兼容<br>缺点: 不优雅</p><p>2.<code>history</code><br>访问URL: <code>http://localhost:4000/faq</code></p><ul><li>浏览器需要支持HTML5 API，所以它不能在IE 9或更低版本上工作</li><li>必须自己实现404页面</li></ul><p>优点： 优雅<br>缺点： 不兼容</p><p>3.<code>abstract</code></p><p>可以在任何JavaScript环境中使用。如果没有可用的浏览器API，路由器将被迫使用此模式。</p><h3 id="创建导航菜单"><a href="#创建导航菜单" class="headerlink" title="创建导航菜单"></a>创建导航菜单</h3><p>1.创建一个<code>NavMenu.vue</code>组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 链接在这里 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>2.在<code>App.vue</code>中导入<code>NavMenu.vue</code>组件：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> NavMenu <span class="token keyword">from</span> <span class="token string">'./NavMenu.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    NavMenu  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>然后添加到<code>App</code>模板中：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../assets/logo.svg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>My shirt shop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavMenu</span> <span class="token punctuation">/></span></span></code></pre><h3 id="路由器链接"><a href="#路由器链接" class="headerlink" title="路由器链接"></a>路由器链接</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>faq<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>FAQ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 或者 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/faq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>FAQ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><p>现在可以添加到<code>NavMenu</code>组件了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>home<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>faq<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>FAQ    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="active-class"><a href="#active-class" class="headerlink" title="active class"></a>active class</h3><p>路由器链接在与其关联的路由当前处于激活状态时获取active class。默认情况下，组件使用<strong><code>router-link-active</code></strong> CSS类。</p><p>1.在<code>NavMenu.vue</code>中声明样式：</p><pre class=" language-stylus"><code class="language-stylus">&lt;style lang=<span class="token string">"stylus"</span> scoped><span class="token atrule-declaration"><span class="token atrule">@import</span> <span class="token string">"../style/imports"</span><span class="token punctuation">;</span></span><span class="token selector">.router-link-active <span class="token punctuation">{</span></span>  <span class="token property-declaration"><span class="token property">border-bottom</span> <span class="token number">1</span>px solid $primary-color</span><span class="token punctuation">}</span>&lt;/style></code></pre><p>2.<code>exact</code><br>默认情况下路径为<code>/faq</code>或<code>/</code>，都会匹配路径<code>/</code>，都会获得active class。<br><strong>将<code>exact</code>属性添加到Home链接上</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>home<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span> <span class="token attr-name">exact</span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><h2 id="路由器导航守卫"><a href="#路由器导航守卫" class="headerlink" title="路由器导航守卫"></a>路由器导航守卫</h2><p>路由主要可分为三种类型：</p><ul><li>公开路由始终可访问</li><li>私有路由仅限登录用户访问</li><li>访客路由只能由未登录的用户访问</li></ul><p>1.创建一个私有路由下的组件<code>TicketsLayout.vue</code>:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tickets-layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Your Support tickets<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- TODO --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>2.然后在<code>router.js</code>文件中添加响应的路由：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> TicketsLayout <span class="token keyword">from</span> <span class="token string">'./components/TicketsLayout'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/tickets'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'tickets'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> TicketsLayout  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>3.最后在<code>NavMenu.vue</code>中添加路由连接：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>tickets<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Support tickets<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><h3 id="路由元属性"><a href="#路由元属性" class="headerlink" title="路由元属性"></a>路由元属性</h3><p>刚刚创建的私有路由组件<code>TicketsLayout.vue</code>需要设置为只有已经登录的用户才能访问，所以添加 <strong><code>private</code></strong> 属性到路由器的meta对象：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/tickets'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">,</span> meta<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="导航守卫-beforeEach"><a href="#导航守卫-beforeEach" class="headerlink" title="导航守卫 beforeEach"></a>导航守卫 <code>beforeEach</code></h3><p>在路由器解析之前执行一些逻辑来检查用户是否已经登录。<code>beforeEach</code>每次在路由解析之前运行，允许我们在必要时用另一个路由替换目标路由，它接受带有3个参数的回调函数：</p><ul><li><code>to</code>是当前的目标路由</li><li><code>from</code>是以前的路由</li><li><code>next</code>是为了完成解析不得不在某个时刻调用的函数（如果没有调用，应用会卡住）</li></ul><p>1.在导出路由器实例之前，添加<code>beforeEach</code>导航守卫：</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// TODO</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'to'</span><span class="token punctuation">,</span> to<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>2.现在需要确定目标路由是否为私有路由：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token keyword">private</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// TODO 重定向到登录</span><span class="token punctuation">}</span></code></pre><p>3.要检查用户是否已经登录，我们需要全局状态——可以在<code>router.js</code>文件的开始将存储全局变量的<code>state.js</code>文件导入：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">'./state'</span></code></pre><p>4.更改条件表达式以检查用户状态：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><ul><li><code>logout</code>方法：</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> logout <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">'logout'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">'ok'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$state<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li><code>login</code>方法：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> login <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$state<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    body<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      username<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>现在可以尝试登出并点击Support tickets链接，会立即重定向到登录页面。</p><p><strong>当用<code>next</code>重定向时，每次重定向都不会为浏览器历史记录添加额外条目。只有最后的路由才有历史记录。</strong></p><h3 id="导航到期望的路由"><a href="#导航到期望的路由" class="headerlink" title="导航到期望的路由"></a>导航到期望的路由</h3><p>1.将当前想要访问的URL作为参数传递给登录路由：</p><pre class=" language-js"><code class="language-js"><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>  params<span class="token punctuation">:</span> <span class="token punctuation">{</span>    wantedRoute<span class="token punctuation">:</span> to<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>2.可以改变login方法中的重定向并使用这个参数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>wantedRoute <span class="token operator">||</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="访客路由"><a href="#访客路由" class="headerlink" title="访客路由"></a>访客路由</h3><p>我们不希望已经登录的用户访问登录路由！</p><p>1.标记访客路由：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> Login<span class="token punctuation">,</span>  meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>    guest<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>2.在<code>beforeEach</code>内部，检查路由是否仅限访客浏览。如果已登录，则重定向到主页：</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>guest <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>现在在登录状态下打开登录URL，会立刻被重定向到主页！</p><h3 id="会话过期"><a href="#会话过期" class="headerlink" title="会话过期"></a>会话过期</h3><p>一段时间后，用户会话可能不再有效，或者仅仅是因为服务器重启。尝试重现这种情况：</p><p>（1）确保你已经登录到应用<br>（2）在运行服务器的终端中键入<code>rs</code>，然后按回车重启<br>（3）跳到Home页面<br>（4）跳到Support tickets页面，以返回工单列表页面</p><p>你应该会卡在加载动画，服务器返回了未授权的错误，因为我们不处于登录状态了！</p><p><strong>因此，需要将用户登出。如果处于私有路由中，还要重定向到登录页面。</strong></p><p>1.在修改请求方法（<code>/plugin/fetch.js</code>）前，需要导入state和路由器：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">"../state"</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"../router"</span></code></pre><p>2.在<code>fetch.js</code>响应处理中添加一个条件分支：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果会话不在有效</span>  <span class="token comment" spellcheck="true">// 我们登出</span>  state<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment" spellcheck="true">// 如果这个路由是私有的</span>  <span class="token comment" spellcheck="true">// 我们跳转到登录页面</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>r <span class="token operator">=</span><span class="token operator">></span> r<span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token keyword">private</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span>      wantedRoute<span class="token punctuation">:</span> router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>fullPath    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><ul><li><strong>我们使用replace方法而不是push，因为不想在浏览器历史记录中创建新导航。</strong></li><li>如果使用push，用户点击后退按钮，会再次重定向到登录页，无法返回私有页面之前的页面。</li></ul><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>1.创建<code>NewTicket.vue</code>和<code>Tickets.vue</code>组件：</p><ul><li><code>NewTicket.vue</code>：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>new-ticket<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>New ticket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><ul><li><code>Tickets.vue</code>：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>new-ticket<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>New ticket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>2.在<code>router.js</code>中，添加路由：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> NewTicket <span class="token keyword">from</span> <span class="token string">'./components/NewTicket'</span><span class="token keyword">import</span> Tickets <span class="token keyword">from</span> <span class="token string">'./components/Tickets'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/tickets'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> TicketsLayout<span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'tickets'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Tickets<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// path是空字符串，在解析父路由时它将成为默认路由，所以将父路由的name'tickets'转移到这里</span>      <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'new'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'new-ticket'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> NewTicket<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>3.最后更改<code>TicketsLayout.vue</code>组件，添加路由器视图和切换子路由的几个按钮：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tickets-layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Your Support tickets<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>actions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>          <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$route.name !<span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>tickets<span class="token punctuation">'</span><span class="token punctuation">"</span></span>          <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>secondary<span class="token punctuation">"</span></span>          <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>tickets<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>See all tickets      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>          <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$route.name !<span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>new-ticket<span class="token punctuation">'</span><span class="token punctuation">"</span></span>          <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>          <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>new-ticket<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>New Ticket      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="修复导航守卫"><a href="#修复导航守卫" class="headerlink" title="修复导航守卫"></a>修复导航守卫</h4><p>如果你登出并转到工单页面，应该会很惊讶地发现能够访问！</p><p><em>之前<code>beforeEach</code>导航守卫的实施存在一个缺陷——嵌套路由，to参数只是目标路由，也就是<code>/ticket</code>路由的第一个子路由——它没有private元属性</em></p><ul><li>所以我们要检查所有匹配的嵌套路由对象，使用<code>matched</code>属性访问路由对象的列表，然后使用<code>some</code>数组方法来验证至少有一个匹配：</li></ul><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>r <span class="token operator">=</span><span class="token operator">></span> r<span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token keyword">private</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>r <span class="token operator">=</span><span class="token operator">></span> r<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>guest<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>现在修复好了！</p><h2 id="高级路由特性"><a href="#高级路由特性" class="headerlink" title="高级路由特性"></a>高级路由特性</h2><h3 id="具有参数的动态路由"><a href="#具有参数的动态路由" class="headerlink" title="具有参数的动态路由"></a>具有参数的动态路由</h3><p>1.创建一个新的<code>Ticket.vue</code>文件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ticket<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Ticket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loading</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remoteDataBusy<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empty<span class="token punctuation">"</span></span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!ticket<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      Ticket not found.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- General info --></span>      <span class="token comment" spellcheck="true">&lt;!-- ... --></span>      <span class="token comment" spellcheck="true">&lt;!-- Content --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>{{ ticket.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ ticket.description }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>2.然后为该组件添加一个<code>id</code> prop：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="动态远程数据"><a href="#动态远程数据" class="headerlink" title="动态远程数据"></a>动态远程数据</h4><p>使用mixin获取数据：</p><ul><li>在<code>RemoteData.js</code>中：</li></ul><pre class=" language-js"><code class="language-js">created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// resources = {</span>  <span class="token comment" spellcheck="true">//   ticket () {</span>  <span class="token comment" spellcheck="true">//     return `ticket/${this.id}`</span>  <span class="token comment" spellcheck="true">//   }</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> resources<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 如果值是一个函数</span>    <span class="token comment" spellcheck="true">// 侦听它的结果</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> url <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchResource</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 请求path/ticket/${this.id}数据，并将结果返回到组件的data.key(即data.ticket)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        immediate<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchResource</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>在<code>Ticket</code>组件中：</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> RemoteData <span class="token keyword">from</span> <span class="token string">'../mixins/RemoteData'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token function">RemoteData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      ticket <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`ticket/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>可以使用冒号将动态片段添加到路由路径中。然后，每个片段将暴露在路由params对象中。</p><table><thead><tr><th>模式</th><th>示例路径</th><th>$route.params的值</th></tr></thead><tbody><tr><td>/tickets/:id</td><td>/tickets/abc</td><td>{ id: ‘abc’ }</td></tr><tr><td>/tickets/:id/comments/:comId</td><td>/tickets/abc/comments/42</td><td>{ id: ‘abc’, comId: ‘42’ }</td></tr></tbody></table><p>1.在<code>router.js</code>中添加路由：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/tickets'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> TicketsLayout<span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'tickets'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Tickets<span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'new'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'new-ticket'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> NewTicket<span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">':id'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'ticket'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Ticket<span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>2.在Tickets.vue中，将标题元素的链接指向新的路由：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>ticket<span class="token punctuation">'</span>, params: { id: ticket._id }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ ticket.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><p>3.更改router.js，告诉vue-router用props属性将所有路由参数作为prop传递给它：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">':id'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><ul><li>或者更加灵活：</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">':id'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'ticket'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Ticket<span class="token punctuation">,</span> props<span class="token punctuation">:</span> route <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>如果你需要结合静态和动态prop，请使用函数语法！</p><h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>目前，如果你在应用中输入无效的URL，会遇到空白页，可以自定义404页面。</p><p>1.创建NotFound.vue组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-found<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>This page can't be found<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>more-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      Sorry, but we can't find the page you're looking for.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      It might have been moved or deleted.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      Check your spelling or click below to return to the homepage.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>actions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>home<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Return to home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token comment" spellcheck="true">/* ... */</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>2.在router.js中添加一个匹配<code>*</code>路径的新路由：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> NotFound <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><strong>把这个路由放在routes数组的末尾，确保了所有合法路由在匹配最后这一条特定的全拦截路由之前匹配。</strong><br><em>路由先定义先匹配。</em></p><p>现在，尝试一个不存在的URL，会出现NotFound页面！</p><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p>使用<code>&lt;transition /&gt;</code>包装路由器视图：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><h3 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h3><p>路由器的history模式允许我们在路由改变时管理页面滚动。</p><p>路由器对象可使用scrollBehavior函数来管理，有3个参数：</p><ul><li><code>to</code>是目标路由对象</li><li><code>from</code>是之前的路由对象</li><li><code>savedPosition</code>是浏览器历史记录中每个条目自动保存的位置滚动。在路由改变之前，每个新条目都不会有这个值。</li></ul><p>返回值：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.想要应用的滚动的坐标</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.滚动到某个HTML元素的选择器，并带有可选的偏移量</span><span class="token punctuation">{</span> selector<span class="token punctuation">:</span> <span class="token string">'#foo'</span><span class="token punctuation">,</span> offset<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>1.要在路由改变时滚动到页面的顶部，我们需要写：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  scrollBehavior <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 滚动到&lt;h1>元素</span>    <span class="token comment" spellcheck="true">// return { selector: 'h1' }</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.检查路由是否有模仿浏览器行为的散列值：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>selector<span class="token punctuation">:</span> to<span class="token punctuation">.</span>hash<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.最后，如果有滚动位置，可以恢复该滚动位置：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> savedPosition<span class="token punctuation">}</span></code></pre><ul><li>整段代码：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  scrollBehavior <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> savedPosition    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>selector<span class="token punctuation">:</span> to<span class="token punctuation">.</span>hash<span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Vue.js项目实战》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;vue-router&quot;&gt;&lt;a href=&quot;#vue-router&quot; class=&quot;headerlink&quot; title=&quot;vue-router&quot;&gt;&lt;/a&gt;vue-router&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://zhanyunmian.coding.me/tags/Vue/"/>
    
      <category term="vue-router" scheme="http://zhanyunmian.coding.me/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>Vue入门笔记三(Vuex)</title>
    <link href="http://zhanyunmian.coding.me/2019/08/05/Vue%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E4%B8%89-Vuex/"/>
    <id>http://zhanyunmian.coding.me/2019/08/05/Vue入门笔记三-Vuex/</id>
    <published>2019-08-05T13:01:09.000Z</published>
    <updated>2019-10-19T13:13:59.578Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《Vue.js项目实战》</p></blockquote><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><h4 id="集中式的状态管理"><a href="#集中式的状态管理" class="headerlink" title="集中式的状态管理"></a>集中式的状态管理</h4><ul><li>Vuex从Flux（由Facebook开发）的概念中获取得灵感。Flux又一系列指导原则构成，阐明了如何使用集中式store来实现组件之间的单向数据流。</li><li>Vuex的核心元素是store，是进行数据存储和数据处理的主要架构。</li></ul><a id="more"></a><p>store包含如下信息：</p><pre class=" language-js"><code class="language-js">state            <span class="token comment" spellcheck="true">// 存储应用状态的响应式数据对象</span>getter          <span class="token comment" spellcheck="true">// 等价于store的计算属性</span>mutation     <span class="token comment" spellcheck="true">// 用来改变应用状态的函数</span>action         <span class="token comment" spellcheck="true">// 通常用来调用异步API的函数，然后使用mutation改变数据</span></code></pre><h4 id="Vuex-store"><a href="#Vuex-store" class="headerlink" title="Vuex store"></a>Vuex store</h4><p>1.安装vuex</p><pre class=" language-powershell"><code class="language-powershell">npm i <span class="token operator">-</span>S vuex</code></pre><p>然后新建store文件夹，并创建index.js来安装Vuex插件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span></code></pre><p>2.使用Vuex.Store构造函数创建store:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO 选项</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>3.导出store：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><p>4.在main.js文件中，导入store:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span></code></pre><p>5.为了让store在应用中生效，我们还需要像注入路由器一样注入它：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    router<span class="token punctuation">,</span>    store<span class="token punctuation">,</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token operator">...</span>App<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="state是唯一数据源"><a href="#state是唯一数据源" class="headerlink" title="state是唯一数据源"></a>state是唯一数据源</h4><p>state是store的主要组成部分，它展示了应用中组件的所有共享数据。</p><ul><li>state是共享数据的唯一数据源</li><li>state是只读的</li></ul><p>（1）在store选项中添加state函数，该函数返回一个对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>（2）在组件中读取状态：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user</code></pre><h4 id="使用mutation修改状态"><a href="#使用mutation修改状态" class="headerlink" title="使用mutation修改状态"></a>使用mutation修改状态</h4><ul><li>mutation是修改state的唯一方式</li><li>mutation接受state作为第一个参数，同时接受一个可选的载荷（payload）参数，以此来更新state</li><li>不应该在mutation中使用异步操作</li><li>严格模式：避免在mutation中使用异步函数<code>strict: true</code></li><li>不要在生产环境下启用严格模式，以免影响性能<code>strict: process.env.NODE_ENV !== &#39;production&#39;</code></li></ul><p>（1）添加一个mutation：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> user<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            state<span class="token punctuation">.</span>user <span class="token operator">=</span> user        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>（2）表明调用mutation的用词是commit，在组件中：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> userData<span class="token punctuation">)</span></code></pre><h4 id="使用getter计算和返回数据"><a href="#使用getter计算和返回数据" class="headerlink" title="使用getter计算和返回数据"></a>使用getter计算和返回数据</h4><p>（1）创建一个getter：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    getter<span class="token punctuation">:</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>user<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>（2）在组件中，可以用这个getter代替之前直接获取状态的方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getter<span class="token punctuation">.</span>user <span class="token comment" spellcheck="true">// this.$store.state.user</span></code></pre><h4 id="使用action操作store"><a href="#使用action操作store" class="headerlink" title="使用action操作store"></a>使用action操作store</h4><ul><li>action不仅可以提交mutation，还能做异步操作</li><li>action的声明由一个类型和一个处理函数构成<code>store.dispath(&#39;action-type&#39;, payloadObject)</code></li><li>action的处理函数接收两个参数：<br>  1.context<br>  2.payload</li></ul><p>（1）创建action:</p><pre class=" language-js"><code class="language-js">actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    login <span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token punctuation">{</span>        profile<span class="token punctuation">:</span> <span class="token punctuation">{</span>          displayName<span class="token punctuation">:</span> <span class="token string">'Mr Cat'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>     <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> userData<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>（2）在组件中使用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span></code></pre><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><p><strong>Vuex提供了一系列辅助函数供添加state、getter、mutation以及action。出于将组建中的状态和逻辑分离的考虑，我们只应该在组件中使用getter和action，所以只会用到mapGetters和mapActions。</strong><br>辅助函数的参数可以是：<br>1.类型的数组，其中的每一个元素对应于组件中的同名数据<br>2.对象，其中的键是组件中数据的别名，值则是类型<br>数组语法例如：</p><pre class=" language-js"><code class="language-js"><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 等价于</span><span class="token punctuation">{</span>    a <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>a <span class="token punctuation">}</span><span class="token punctuation">,</span>    b <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>b <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>对象语法例如：</p><pre class=" language-js"><code class="language-js"><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token string">'b'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 等价于</span><span class="token punctuation">{</span>    x <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>a <span class="token punctuation">}</span><span class="token punctuation">,</span>    y <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>b <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>（1）在组件中导入：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters<span class="token punctuation">,</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span></code></pre><p>（2）然后将组件修改为：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">'user'</span><span class="token punctuation">,</span>      <span class="token string">'userPicture'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        centerOnUser<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>        logout<span class="token punctuation">:</span> <span class="token string">'logout'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="Vuex模块"><a href="#Vuex模块" class="headerlink" title="Vuex模块"></a>Vuex模块</h3><p>创建两个模块：</p><ul><li>maps</li><li>posts<br>（1）在store文件夹中新建一个maps.js文件。它导出一个默认模块定义，其中包括地图的state：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    state <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            center<span class="token punctuation">:</span> <span class="token punctuation">{</span>                lat<span class="token punctuation">:</span> <span class="token number">48.8538302</span><span class="token punctuation">,</span>                lng<span class="token punctuation">:</span> <span class="token number">2.2982161</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（2）将模块添加到store中，在store/index.js文件中添加modules选项：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> maps <span class="token keyword">from</span> <span class="token string">'./maps'</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>        maps<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>默认情况下，模块中getter、mutation、action的状态也会成为这个模块的状态。这里它是store.state.maps。</p><h4 id="带命名空间的模块"><a href="#带命名空间的模块" class="headerlink" title="带命名空间的模块"></a>带命名空间的模块</h4><p>上面的namespaced选项告诉Vuex在该模块的所有getter、mutation、action前添加maps/命名空间，还会在这个模块内的commit和dispatch调用中添加它们。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// getter模块</span>getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    center<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>center<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>maps/center getter 会被添加到store中。使用时可以这么写：<br>1.getters</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'maps/center'</span><span class="token punctuation">]</span></code></pre><p>2.使用getter辅助函数：</p><pre class=" language-js"><code class="language-js"><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    center<span class="token punctuation">:</span> <span class="token string">'maps/center'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>3.可以指定命名空间：</p><pre class=" language-js"><code class="language-js"><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'maps'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token string">'center'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>4.使用createNamespacedHelpers方法生成基于某个命名空间的辅助函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createNamespacedHelpers <span class="token punctuation">}</span> <span class="token keyword">from</span> vuex<span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createNamespacedHelpers</span><span class="token punctuation">(</span><span class="token string">'maps'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    computed<span class="token punctuation">:</span> <span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'center'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="访问全局元素"><a href="#访问全局元素" class="headerlink" title="访问全局元素"></a>访问全局元素</h4><p>1.在getter中<br>你可以在命名空间模块的getter中访问到根状态和根getter（即所有的getter）：</p><pre class=" language-js"><code class="language-js">someGetter<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> rootGetters<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">}</span></code></pre><p>2.在action中<br>你可以访问到上下文的rootGetters，还可以在commit和dispatch调用中使用<code>{ root: true }</code>选项：</p><pre class=" language-js"><code class="language-js"><span class="token function">myAction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> rootGetters <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    getters<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true">// store.getters['maps/a']</span>    rootGetters<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true">// store.getters['a']</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'someMutation'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'maps/someMutation'</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'someMutation'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'someMutation'</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'someAction'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'maps/someAction'</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'someAction'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'someAction'</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Vue.js项目实战》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Vuex&quot;&gt;&lt;a href=&quot;#Vuex&quot; class=&quot;headerlink&quot; title=&quot;Vuex&quot;&gt;&lt;/a&gt;Vuex&lt;/h3&gt;&lt;h4 id=&quot;集中式的状态管理&quot;&gt;&lt;a href=&quot;#集中式的状态管理&quot; class=&quot;headerlink&quot; title=&quot;集中式的状态管理&quot;&gt;&lt;/a&gt;集中式的状态管理&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Vuex从Flux（由Facebook开发）的概念中获取得灵感。Flux又一系列指导原则构成，阐明了如何使用集中式store来实现组件之间的单向数据流。&lt;/li&gt;
&lt;li&gt;Vuex的核心元素是store，是进行数据存储和数据处理的主要架构。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://zhanyunmian.coding.me/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue入门笔记二</title>
    <link href="http://zhanyunmian.coding.me/2019/08/05/Vue%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://zhanyunmian.coding.me/2019/08/05/Vue入门笔记二/</id>
    <published>2019-08-05T09:59:14.000Z</published>
    <updated>2019-10-19T13:10:24.113Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《Vue.js项目实战》</p></blockquote><ul><li>开发所需的包称为开发依赖，应该使用–save-dev标志进行安装 <strong>-D</strong></li><li>应用运行需要的直接依赖应该使用–save标志进行安装 <strong>-S</strong></li></ul><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>Vue具有自己的格式，名为单文件组件（SFC），文件扩展名为.vue。<br>单文件组件使用类似HTML的语法描述Vue组件。</p><a id="more"></a><h4 id="使用Pug"><a href="#使用Pug" class="headerlink" title="使用Pug"></a>使用Pug</h4><p>Pug（以前称为Jade）是一种编译到HTML的语言。</p><pre class=" language-jade"><code class="language-jade"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pug<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>  <span class="token tag">ul.movies</span>    <span class="token tag">li.movie</span> <span class="token plain-text">Star Wars</span>    <span class="token tag">li.movie</span> <span class="token plain-text">Blade Runner</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></span></code></pre><p>安装依赖：</p><pre class=" language-powershell"><code class="language-powershell">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev pug pug<span class="token operator">-</span>loader</code></pre><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><h4 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h4><p><strong>在JSX中，标签首字母大小写很重要！</strong></p><ul><li>如果是小写，编译器会认为它是createElement函数的一个字符串参数，然后将它编译为一个HTML元素或已注册组件；</li><li>如果首字母大写，编译器会认为它是一个变量！</li></ul><p><strong>不能既使用渲染函数又使用模板，要移除文件中<code>&lt;template&gt;</code>部分</strong></p><p>示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      movies<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>title<span class="token punctuation">:</span> <span class="token string">'Star Wars'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>title<span class="token punctuation">:</span> <span class="token string">'Blade Runner'</span><span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> itemClass <span class="token operator">=</span> <span class="token string">'movie'</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'movie'</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>movies<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>movie <span class="token operator">=</span><span class="token operator">></span>        <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span> itemClass <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span> movie<span class="token punctuation">.</span>title <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>编译过程：babel-preset-vue中的一个特殊模块（名为babel-plugin-transform-vue-jsx）将JSX代码转换为纯JavaScript代码<br>编译之后：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> itemClass <span class="token operator">=</span> <span class="token string">'movie'</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'movies'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>movies<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>movie <span class="token operator">=</span><span class="token operator">></span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token punctuation">:</span> itemClass<span class="token punctuation">}</span><span class="token punctuation">,</span> movie<span class="token punctuation">.</span>title<span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>1.有作用域的样式<br>可以使用<code>&lt;style&gt;</code>标签的scoped属性将标签内的CSS作用域限定在当前组件中。<br>主要是因为PostCSS应用到模板和CSS的一个特殊属性data-v-xxxxxxxx。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Hello  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.title</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>等价于：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">data-v-02ad4e58</span><span class="token punctuation">></span></span>    Hello  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.title</span><span class="token attribute">[data-v-02ad4e58]</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>2.添加预处理器</p><h4 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h4><p>（1）安装包</p><pre class=" language-powershell"><code class="language-powershell">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev node<span class="token operator">-</span>sass sass<span class="token operator">-</span>loader</code></pre><p>（2）在组件中，添加lang属性为”“sass”的<code>&lt;style&gt;</code>标签</p><pre class=" language-scss"><code class="language-scss">&lt;style lang=<span class="token string">"sass"</span>>  <span class="token number">.</span>active    <span class="token number">.</span>title      <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token function">rgba</span><span class="token punctuation">(</span>red, <span class="token number">.2</span><span class="token punctuation">)</span>&lt;/style></code></pre><p>（3）用vue build命令测试你的组件</p><h4 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h4><p>（1）安装包</p><pre class=" language-powershell"><code class="language-powershell">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev less less<span class="token operator">-</span>loader</code></pre><p>（2）在组件中，添加lang属性为”“less”的<code>&lt;style&gt;</code>标签</p><pre class=" language-less"><code class="language-less"><span class="token selector">&lt;style lang="less">.active</span><span class="token punctuation">{</span>    <span class="token selector">.title</span><span class="token punctuation">{</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token function">fade</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> <span class="token number">20%</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;<span class="token operator">/</span>style></code></pre><h4 id="Stylus"><a href="#Stylus" class="headerlink" title="Stylus"></a>Stylus</h4><p>Stylus比Less和Sass更年轻，也很受欢迎。<br>（1）安装包</p><pre class=" language-powershell"><code class="language-powershell">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev stylus stylus<span class="token operator">-</span>loader</code></pre><p>（2）在组件中，添加lang属性为”“stylus”的<code>&lt;style&gt;</code>标签</p><pre class=" language-stylus"><code class="language-stylus"><span class="token selector">&lt;style lang="stylus"></span>  <span class="token selector">.active</span>    <span class="token selector">.title</span>      <span class="token property-declaration"><span class="token property">border-bottom</span> <span class="token number">1</span>px solid <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> <span class="token operator">.</span><span class="token number">2</span><span class="token punctuation">)</span></span></span>&lt;/style></code></pre><p>3.为限定作用域的元素的子元素编写样式</p><h4 id="gt-gt-gt-子元素"><a href="#gt-gt-gt-子元素" class="headerlink" title="&gt;&gt;&gt; 子元素"></a>&gt;&gt;&gt; 子元素</h4><pre class=" language-stylus"><code class="language-stylus"><span class="token selector">&lt;style lang="stylus" scoped></span>  <span class="token selector">.form <span class="token punctuation">{</span></span>    <span class="token selector">>>> .content <span class="token punctuation">{</span></span>      <span class="token property-declaration"><span class="token property">max-width</span> <span class="token number">400</span>px</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>&lt;/style></code></pre><p>等价于:</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.form</span><span class="token attribute">[data-v-0e596401]</span> <span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果不使用&gt;&gt;&gt;连结符，则输出这样的CSS：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.form</span> <span class="token class">.content</span><span class="token attribute">[data-v-0e596401]</span> </span><span class="token punctuation">{</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><em>如果使用SASS，则需要使用<code>/deep/</code>选择器而不是&gt;&gt;&gt;连结符</em></p><h3 id="组件内的组件"><a href="#组件内的组件" class="headerlink" title="组件内的组件"></a>组件内的组件</h3><p>1.创建一个新组件Movie.vue：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> movie<span class="token punctuation">.</span>title <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'movie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.movie</span><span class="token pseudo-class">:not(:last-child)</span> </span><span class="token punctuation">{</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>创建一个父组件Movies.vue：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(movie,</span> <span class="token attr-name">index)</span> <span class="token attr-name">of</span> <span class="token attr-name">movies"</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>       <span class="token punctuation">{</span><span class="token punctuation">{</span>movie<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> Movie <span class="token keyword">from</span> <span class="token string">'./Movie.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    Movie<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      movies<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Star Wars'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Blade Runner'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>2.在Movies组件的脚本中导入Movie单文件组件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Movie <span class="token keyword">from</span> <span class="token string">'./Movie.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>3.使用对象设置components选项，将一些组件暴露给模板：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    Movie<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 相当于 `Movie: Movie,`</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>4.在模板中通过<code>&lt;Movie&gt;</code>使用这个组件</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Movie</span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(movie,</span> <span class="token attr-name">index)</span> <span class="token attr-name">of</span> <span class="token attr-name">movies"</span>      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>      <span class="token attr-name">:movie</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="如果你在使用JSX"><a href="#如果你在使用JSX" class="headerlink" title="如果你在使用JSX"></a>如果你在使用JSX</h4><p>不需要components选项，因为以大写字母开头则可以直接使用组件定义</p><ul><li>示例一：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Movie <span class="token keyword">from</span> <span class="token string">'./Movie.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Movie <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li>示例二：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> LocationInfo <span class="token keyword">from</span> <span class="token string">'./LocationInfo.vue'</span><span class="token keyword">import</span> NoContent <span class="token keyword">from</span> <span class="token string">'./NoContent.vue'</span><span class="token keyword">import</span> CreatePost <span class="token keyword">from</span> <span class="token string">'./CreatePost.vue'</span><span class="token keyword">import</span> PostContent <span class="token keyword">from</span> <span class="token string">'./PostContent.vue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createNamespacedHelpers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">// posts module</span><span class="token keyword">const</span> <span class="token punctuation">{</span>  mapGetters<span class="token punctuation">:</span> postsGetters<span class="token punctuation">,</span>  mapActions<span class="token punctuation">:</span> postsActions<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createNamespacedHelpers</span><span class="token punctuation">(</span><span class="token string">'posts'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">postsGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">'draft'</span><span class="token punctuation">,</span>      <span class="token string">'currentPost'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    cssClass <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token string">'blog-content'</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token string">'has-content'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentPost<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  render <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> Content    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentPost<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Content <span class="token operator">=</span> NoContent    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>draft<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Content <span class="token operator">=</span> CreatePost    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      Content <span class="token operator">=</span> PostContent    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>cssClass<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>LocationInfo <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Content <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Vue.js项目实战》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;开发所需的包称为开发依赖，应该使用–save-dev标志进行安装 &lt;strong&gt;-D&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;应用运行需要的直接依赖应该使用–save标志进行安装 &lt;strong&gt;-S&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模板&quot;&gt;&lt;a href=&quot;#模板&quot; class=&quot;headerlink&quot; title=&quot;模板&quot;&gt;&lt;/a&gt;模板&lt;/h3&gt;&lt;p&gt;Vue具有自己的格式，名为单文件组件（SFC），文件扩展名为.vue。&lt;br&gt;单文件组件使用类似HTML的语法描述Vue组件。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://zhanyunmian.coding.me/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue入门笔记一</title>
    <link href="http://zhanyunmian.coding.me/2019/08/05/Vue%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://zhanyunmian.coding.me/2019/08/05/Vue入门笔记一/</id>
    <published>2019-08-04T16:40:51.000Z</published>
    <updated>2019-10-19T13:16:06.635Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《Vue.js项目实战》Guillaume Chau</p></blockquote><h3 id="Vue核心功能概述"><a href="#Vue核心功能概述" class="headerlink" title="Vue核心功能概述"></a>Vue核心功能概述</h3><p>1.一个响应式的数据系统，能通过轻量级的虚拟DOM引擎和最少的优化工作来自动更新用户界面<br>2.灵活的视图声明，包括优雅友好的HTML模板、JSX（在JavaSript中编写HTML的技术）以及hyperscript（完全使用JavaScript）<br>3.由可维护、可复用组件构成的组件化用户界面<br>4.官方的组件库提供了路由、状态管理、脚手架以及更多高级功能，使Vue成为了一个灵活且功能完善的前端框架</p><a id="more"></a><h3 id="兼容性要求"><a href="#兼容性要求" class="headerlink" title="兼容性要求"></a>兼容性要求</h3><ul><li>Vue没有任何第三方依赖</li><li>可以在所有兼容ECMAScript 5 的浏览器中使用</li><li>不支持Internet Explorer 8 及以下版本</li><li>编写ES2015（ES6）需要编译器Babel，才能在老版本浏览器中运行</li></ul><h3 id="Vue开发者工具"><a href="#Vue开发者工具" class="headerlink" title="Vue开发者工具"></a>Vue开发者工具</h3><ul><li>Chrome    Vue.js devtools【启用Allow access to file URLs，调试工具就能在从本地磁盘打开的Web页面上检测Vue】</li></ul><h3 id="高级项目设置"><a href="#高级项目设置" class="headerlink" title="高级项目设置"></a>高级项目设置</h3><pre class=" language-js"><code class="language-js">npm install <span class="token operator">-</span>g vue<span class="token operator">-</span>cli                            <span class="token comment" spellcheck="true">// 安装官方命令行工具vue-cli</span>vue <span class="token operator">--</span>version                                     <span class="token comment" spellcheck="true">// 测试vue-cli运行，打印版本</span><span class="token comment" spellcheck="true">// 项目脚手架</span>vue list                                          <span class="token comment" spellcheck="true">// 列出官方项目模板</span><span class="token comment" spellcheck="true">// vue init &lt;template> &lt;dir>使用模板创建新的应用项目</span><span class="token comment" spellcheck="true">// 官方模板主要有以下3种主要类型</span><span class="token comment" spellcheck="true">// simple                                            不使用构建工具</span><span class="token comment" spellcheck="true">// webpack                                           使用非常流行的Webpack打包器</span><span class="token comment" spellcheck="true">// browserify                                        使用Browserify构建工具</span>vue init webpack<span class="token operator">-</span>simple democd demonpm install                                       <span class="token comment" spellcheck="true">// 安装依赖包</span>npm run dev                                       <span class="token comment" spellcheck="true">// 以开发模式启动应用</span>npm run build                                     <span class="token comment" spellcheck="true">// 为生产而构建</span><span class="token comment" spellcheck="true">// 配置Babel</span><span class="token comment" spellcheck="true">// 1.Babel Vue 预设</span>npm i <span class="token operator">-</span>D babel<span class="token operator">-</span>preset<span class="token operator">-</span>vue<span class="token comment" spellcheck="true">// 打开.babelrc文件并将vue预设添加到相应的列表中 【babel 7和7以下的配置有很大区别】</span><span class="token comment" spellcheck="true">// 看下文</span><span class="token comment" spellcheck="true">// 2.polyfill</span>npm i <span class="token operator">-</span>D babel<span class="token operator">-</span>polyfill<span class="token comment" spellcheck="true">// 在src/main.js文件开头导入</span><span class="token comment" spellcheck="true">// import 'babel-polyfill'</span></code></pre><h3 id="babel版本"><a href="#babel版本" class="headerlink" title="babel版本"></a>babel版本</h3><p>在.babelrc文件中：<br>1.”babel-core”: “^6.26.0”</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"stage-3"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>2.”@babel/core”: “^7.5.5”</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// Stage 2</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/plugin-proposal-decorators"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"legacy"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"@babel/plugin-proposal-function-sent"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/plugin-proposal-export-namespace-from"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/plugin-proposal-numeric-separator"</span><span class="token punctuation">,</span>    <span class="token string">"@babel/plugin-proposal-throw-expressions"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Stage 3</span>    <span class="token comment" spellcheck="true">// "@babel/plugin-syntax-dynamic-import",</span>    <span class="token comment" spellcheck="true">// "@babel/plugin-syntax-import-meta",</span>    <span class="token comment" spellcheck="true">// [</span>    <span class="token comment" spellcheck="true">//   "@babel/plugin-proposal-class-properties",</span>    <span class="token comment" spellcheck="true">//   {</span>    <span class="token comment" spellcheck="true">//     "loose": false</span>    <span class="token comment" spellcheck="true">//   }</span>    <span class="token comment" spellcheck="true">// ],</span>    <span class="token comment" spellcheck="true">// "@babel/plugin-proposal-json-strings"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"transform-es2015-modules-commonjs"</span><span class="token punctuation">,</span>        <span class="token string">"dynamic-import-node"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><p>1.移除src文件夹中的内容<br>2.使用以下内容创建一个新的JavaScript文件，名为main.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a>更新依赖</h3><p>1.手动更新</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.检查项目中使用的包是否有新版本</span>npm outdated<span class="token comment" spellcheck="true">// 2.打开package.json改变对应版本范围，保存</span>npm install</code></pre><p>2.自动更新</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> update</code></pre><p>3.更新Vue<br>vue包和vue-template-compiler包必须始终处于相同的版本</p><h3 id="渲染函数"><a href="#渲染函数" class="headerlink" title="渲染函数"></a>渲染函数</h3><p>Vue使用了一个虚拟DOM的实现，用树状结构的JavaScript对象来构建虚拟DOM。然后，Vue将虚拟DOM应用到真实浏览器的DOM上，所用方法是计算两者之间的差异。这尽可能避免了DOM操作，因为DOM操作通常是主要的性能瓶颈。<br><strong>实际上，当你使用模板时，Vue会将其编译成渲染函数。如果你需要JavaScript的全部功能和灵活性，可以自己直接编写渲染函数或编写JSX。</strong><br>h是createElement的别名，得名于使用JavaScript描述HTML的技术——Hyperscript。<br>createElement（或称h）方法最多需要3个参数：<br>1.元素类型：可以是HTML标签名称（如div），在应用中注册过的组件名称，或者一个组件定义对象<br>2.可选参数：定义属性、prop、事件监听器等的数据对象<br>3.可选参数：简单纯文本、用h创建的其他元素的数组</p><pre class=" language-js"><code class="language-js"><span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'movies'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'movie'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'Star Wars'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'movie'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'Blade Runner'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>它将在浏览器中输出以下DOM：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Star Wars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Blade Runner<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h4 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h4><ul><li>render函数返回由createElement（或h）建立的一个节点树，这些节点在Vue中称为VNode。这棵节点树代表Vue承载的虚拟DOM中的一个组件视图。DOM中的每个元素都是一个节点——HTML元素、文本，甚至注释也是节点。</li><li>Vue不直接将虚拟DOM转化为实际的DOM树，因为这样可能引发很多DOM操作（添加或删除节点），十分损耗性能。</li><li>为了更加高效，Vue在两种DOM树之间创建一个差异表，只在必要时才会通过DOM操作将虚拟DOM同步到实际的DOM。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Vue.js项目实战》Guillaume Chau&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Vue核心功能概述&quot;&gt;&lt;a href=&quot;#Vue核心功能概述&quot; class=&quot;headerlink&quot; title=&quot;Vue核心功能概述&quot;&gt;&lt;/a&gt;Vue核心功能概述&lt;/h3&gt;&lt;p&gt;1.一个响应式的数据系统，能通过轻量级的虚拟DOM引擎和最少的优化工作来自动更新用户界面&lt;br&gt;2.灵活的视图声明，包括优雅友好的HTML模板、JSX（在JavaSript中编写HTML的技术）以及hyperscript（完全使用JavaScript）&lt;br&gt;3.由可维护、可复用组件构成的组件化用户界面&lt;br&gt;4.官方的组件库提供了路由、状态管理、脚手架以及更多高级功能，使Vue成为了一个灵活且功能完善的前端框架&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://zhanyunmian.coding.me/tags/Vue/"/>
    
  </entry>
  
</feed>
